// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 5RiFpwPZc2Ux6gBUCfunxc
// Component: RAs3CXxcw7yL

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { Dialog } from "@plasmicpkgs/radix-ui";
import Button from "../../Button"; // plasmic-import: 7BMeq4z7zmfO/component
import { DialogContent } from "@plasmicpkgs/radix-ui";
import { DialogTitle } from "@plasmicpkgs/radix-ui";
import { SliderWrapper } from "@plasmicpkgs/react-slick";
import { sliderHelpers as SliderWrapper_Helpers } from "@plasmicpkgs/react-slick";
import { DialogClose } from "@plasmicpkgs/radix-ui";

import { ModeValue, useMode } from "./PlasmicGlobalVariant__Mode"; // plasmic-import: pQjhaJ-jelU4/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 5RiFpwPZc2Ux6gBUCfunxc/projectcss
import sty from "./PlasmicDialog.module.css"; // plasmic-import: RAs3CXxcw7yL/css

import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: s1EkJXkJAaVo/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: Nl0pNAPfGMi0/icon

createPlasmicElementProxy;

export type PlasmicDialog__VariantMembers = {
  noTrigger: "noTrigger";
};
export type PlasmicDialog__VariantsArgs = {
  noTrigger?: SingleBooleanChoiceArg<"noTrigger">;
};
type VariantPropType = keyof PlasmicDialog__VariantsArgs;
export const PlasmicDialog__VariantProps = new Array<VariantPropType>(
  "noTrigger"
);

export type PlasmicDialog__ArgsType = {
  open?: boolean;
  onOpenChange?: (val: boolean) => void;
  body?: React.ReactNode;
  title?: React.ReactNode;
  trigger?: React.ReactNode;
};
type ArgPropType = keyof PlasmicDialog__ArgsType;
export const PlasmicDialog__ArgProps = new Array<ArgPropType>(
  "open",
  "onOpenChange",
  "body",
  "title",
  "trigger"
);

export type PlasmicDialog__OverridesType = {
  dialog?: Flex__<typeof Dialog>;
  dialogContent?: Flex__<typeof DialogContent>;
  freeBox?: Flex__<"div">;
  dialogTitle?: Flex__<typeof DialogTitle>;
  h5?: Flex__<"h5">;
  dialogClose?: Flex__<typeof DialogClose>;
};

export interface DefaultDialogProps {
  open?: boolean;
  onOpenChange?: (val: boolean) => void;
  body?: React.ReactNode;
  title?: React.ReactNode;
  trigger?: React.ReactNode;
  noTrigger?: SingleBooleanChoiceArg<"noTrigger">;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicDialog__RenderFunc(props: {
  variants: PlasmicDialog__VariantsArgs;
  args: PlasmicDialog__ArgsType;
  overrides: PlasmicDialog__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "dialog.open",
        type: "writable",
        variableType: "boolean",

        valueProp: "open",
        onChangeProp: "onOpenChange"
      },
      {
        path: "noTrigger",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.noTrigger
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    mode: useMode()
  });

  return (
    <Dialog
      data-plasmic-name={"dialog"}
      data-plasmic-override={overrides.dialog}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        "__wab_instance",
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.dialog,
        {
          [projectcss.global_mode_darkMode]: hasVariant(
            globalVariants,
            "mode",
            "darkMode"
          ),
          [sty.dialogglobal_mode_darkMode]: hasVariant(
            globalVariants,
            "mode",
            "darkMode"
          ),
          [sty.dialognoTrigger]: hasVariant($state, "noTrigger", "noTrigger")
        }
      )}
      defaultOpen={true}
      onOpenChange={generateStateOnChangeProp($state, ["dialog", "open"])}
      open={generateStateValueProp($state, ["dialog", "open"])}
      themeResetClass={classNames(
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        {
          [projectcss.global_mode_darkMode]: hasVariant(
            globalVariants,
            "mode",
            "darkMode"
          )
        }
      )}
      triggerSlot={
        (hasVariant($state, "noTrigger", "noTrigger") ? false : true)
          ? renderPlasmicSlot({
              defaultContents: (
                <Button color={"linkDefaultText"}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__eRaOc
                    )}
                  >
                    {"Show dialog"}
                  </div>
                </Button>
              ),
              value: args.trigger
            })
          : null
      }
    >
      <DialogContent
        data-plasmic-name={"dialogContent"}
        data-plasmic-override={overrides.dialogContent}
        className={classNames("__wab_instance", sty.dialogContent, {
          [sty.dialogContentglobal_mode_darkMode]: hasVariant(
            globalVariants,
            "mode",
            "darkMode"
          ),
          [sty.dialogContentnoTrigger]: hasVariant(
            $state,
            "noTrigger",
            "noTrigger"
          )
        })}
        themeResetClass={classNames(
          projectcss.root_reset,
          projectcss.plasmic_default_styles,
          projectcss.plasmic_mixins,
          projectcss.plasmic_tokens,
          plasmic_antd_5_hostless_css.plasmic_tokens,
          plasmic_plasmic_rich_components_css.plasmic_tokens,
          {
            [projectcss.global_mode_darkMode]: hasVariant(
              globalVariants,
              "mode",
              "darkMode"
            )
          }
        )}
      >
        <Stack__
          as={"div"}
          data-plasmic-name={"freeBox"}
          data-plasmic-override={overrides.freeBox}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox)}
        >
          <DialogTitle
            data-plasmic-name={"dialogTitle"}
            data-plasmic-override={overrides.dialogTitle}
            className={classNames("__wab_instance", sty.dialogTitle)}
          >
            <h5
              data-plasmic-name={"h5"}
              data-plasmic-override={overrides.h5}
              className={classNames(projectcss.all, projectcss.h5, sty.h5)}
            >
              {renderPlasmicSlot({
                defaultContents: "Browsing History",
                value: args.title,
                className: classNames(sty.slotTargetTitle, {
                  [sty.slotTargetTitleglobal_mode_darkMode]: hasVariant(
                    globalVariants,
                    "mode",
                    "darkMode"
                  )
                })
              })}
            </h5>
          </DialogTitle>
          {renderPlasmicSlot({
            defaultContents: (() => {
              const child$Props = {
                className: classNames(
                  "__wab_instance",
                  sty.sliderCarousel__kbPry
                ),
                initialSlide: 0,
                sliderScopeClassName: sty["sliderCarousel__kbPry__slider"],
                slidesPerRow: 5
              };

              return (
                <SliderWrapper {...child$Props}>
                  {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                    (() => {
                      try {
                        return [2, 3, 4, 5, 6];
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return [];
                        }
                        throw e;
                      }
                    })()
                  ).map((__plasmic_item_0, __plasmic_idx_0) => {
                    const currentItem = __plasmic_item_0;
                    const currentIndex = __plasmic_idx_0;
                    return (
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__iP8Ep
                        )}
                        key={currentIndex}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__aSgiX
                          )}
                        >
                          <PlasmicImg__
                            alt={""}
                            className={classNames(sty.img__xQu1B)}
                            displayHeight={"auto"}
                            displayMaxHeight={"200px"}
                            displayMaxWidth={"auto"}
                            displayMinHeight={"0"}
                            displayMinWidth={"0"}
                            displayWidth={"auto"}
                            height={"200px"}
                            loading={"lazy"}
                            src={(() => {
                              try {
                                return (
                                  "https://ukqvivcngvomsqjkxswo.supabase.co/storage/v1/object/public/assets/skills_in_english_english_activities_learners_book_grade_1.jpg",
                                  "https://ukqvivcngvomsqjkxswo.supabase.co/storage/v1/object/public/assets/skills_in_english_english_activities_learners_book_grade_1_b.jpg"
                                );
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "https://ukqvivcngvomsqjkxswo.supabase.co/storage/v1/object/public/assets/skills_in_english_english_activities_learners_book_grade_1.jpg";
                                }
                                throw e;
                              }
                            })()}
                            width={"200px"}
                          />
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__ch3Ki
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__mihp6
                            )}
                          >
                            {
                              "Moran Skills in English Activities Learner's Book Grade 1"
                            }
                          </div>
                        </div>
                      </div>
                    );
                  })}
                </SliderWrapper>
              );
            })(),
            value: args.body
          })}
        </Stack__>
        <DialogClose
          data-plasmic-name={"dialogClose"}
          data-plasmic-override={overrides.dialogClose}
          className={classNames("__wab_instance", sty.dialogClose)}
        />
      </DialogContent>
    </Dialog>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  dialog: [
    "dialog",
    "dialogContent",
    "freeBox",
    "dialogTitle",
    "h5",
    "dialogClose"
  ],
  dialogContent: [
    "dialogContent",
    "freeBox",
    "dialogTitle",
    "h5",
    "dialogClose"
  ],
  freeBox: ["freeBox", "dialogTitle", "h5"],
  dialogTitle: ["dialogTitle", "h5"],
  h5: ["h5"],
  dialogClose: ["dialogClose"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  dialog: typeof Dialog;
  dialogContent: typeof DialogContent;
  freeBox: "div";
  dialogTitle: typeof DialogTitle;
  h5: "h5";
  dialogClose: typeof DialogClose;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicDialog__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicDialog__VariantsArgs;
    args?: PlasmicDialog__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicDialog__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicDialog__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicDialog__ArgProps,
          internalVariantPropNames: PlasmicDialog__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicDialog__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "dialog") {
    func.displayName = "PlasmicDialog";
  } else {
    func.displayName = `PlasmicDialog.${nodeName}`;
  }
  return func;
}

export const PlasmicDialog = Object.assign(
  // Top-level PlasmicDialog renders the root element
  makeNodeComponent("dialog"),
  {
    // Helper components rendering sub-elements
    dialogContent: makeNodeComponent("dialogContent"),
    freeBox: makeNodeComponent("freeBox"),
    dialogTitle: makeNodeComponent("dialogTitle"),
    h5: makeNodeComponent("h5"),
    dialogClose: makeNodeComponent("dialogClose"),

    // Metadata about props expected for PlasmicDialog
    internalVariantProps: PlasmicDialog__VariantProps,
    internalArgProps: PlasmicDialog__ArgProps
  }
);

export default PlasmicDialog;
/* prettier-ignore-end */
