// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 5RiFpwPZc2Ux6gBUCfunxc
// Component: LsO8TVomBpkS

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import Navbar from "../../Navbar"; // plasmic-import: fRobOPq7Dpvn/component
import { FormWrapper } from "@plasmicpkgs/antd5/skinny/Form";
import { formHelpers as FormWrapper_Helpers } from "@plasmicpkgs/antd5/skinny/Form";
import { FormItemWrapper } from "@plasmicpkgs/antd5/skinny/FormItem";
import TextInput from "../../TextInput"; // plasmic-import: 1r6uaKWmO0wZ/component
import { AntdButton } from "@plasmicpkgs/antd5/skinny/registerButton";
import ButtonSec from "../../ButtonSec"; // plasmic-import: Ms6td--yDRuI/component
import Footer from "../../Footer"; // plasmic-import: u78mgfCwPbxj/component
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";

import { ModeValue, useMode } from "./PlasmicGlobalVariant__Mode"; // plasmic-import: pQjhaJ-jelU4/globalVariant
import { useScreenVariants as useScreenVariants_5IBvFMcLfRf } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: 5I_bvFMcLfRF/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 5RiFpwPZc2Ux6gBUCfunxc/projectcss
import sty from "./PlasmicCreateAccount.module.css"; // plasmic-import: LsO8TVomBpkS/css

import DividerHorizontalSvgrepoComsvgIcon from "./icons/PlasmicIcon__DividerHorizontalSvgrepoComsvg"; // plasmic-import: mjb3wMhXJz8e/icon
import SearchsvgIcon from "./icons/PlasmicIcon__Searchsvg"; // plasmic-import: eYi9E-VIhoCf/icon
import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: s1EkJXkJAaVo/icon
import EyeOffSvgrepoComsvgIcon from "./icons/PlasmicIcon__EyeOffSvgrepoComsvg"; // plasmic-import: gGHTlqcnQind/icon
import EyeShowSvgrepoComsvgIcon from "./icons/PlasmicIcon__EyeShowSvgrepoComsvg"; // plasmic-import: -NOfVoSGDMbz/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: Nl0pNAPfGMi0/icon

createPlasmicElementProxy;

export type PlasmicCreateAccount__VariantMembers = {};
export type PlasmicCreateAccount__VariantsArgs = {};
type VariantPropType = keyof PlasmicCreateAccount__VariantsArgs;
export const PlasmicCreateAccount__VariantProps = new Array<VariantPropType>();

export type PlasmicCreateAccount__ArgsType = {};
type ArgPropType = keyof PlasmicCreateAccount__ArgsType;
export const PlasmicCreateAccount__ArgProps = new Array<ArgPropType>();

export type PlasmicCreateAccount__OverridesType = {
  login?: Flex__<"div">;
  main?: Flex__<"div">;
  navbar?: Flex__<typeof Navbar>;
  breadcrumbs?: Flex__<"div">;
  link?: Flex__<"a"> & Partial<LinkProps>;
  img?: Flex__<typeof PlasmicImg__>;
  h3?: Flex__<"h3">;
  form?: Flex__<typeof FormWrapper>;
  firstName?: Flex__<typeof TextInput>;
  lastName?: Flex__<typeof TextInput>;
  email?: Flex__<typeof TextInput>;
  password?: Flex__<typeof TextInput>;
  hidePassword?: Flex__<"div">;
  showPassword?: Flex__<"div">;
  password2?: Flex__<typeof TextInput>;
  hidePassword2?: Flex__<"div">;
  showPassword2?: Flex__<"div">;
  button?: Flex__<typeof AntdButton>;
  buttonSec?: Flex__<typeof ButtonSec>;
  footer?: Flex__<typeof Footer>;
};

export interface DefaultCreateAccountProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicCreateAccount__RenderFunc(props: {
  variants: PlasmicCreateAccount__VariantsArgs;
  args: PlasmicCreateAccount__ArgsType;
  overrides: PlasmicCreateAccount__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "form.value",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "form",
        onMutate: generateOnMutateForSpec("value", FormWrapper_Helpers)
      },
      {
        path: "form.isSubmitting",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false,

        refName: "form",
        onMutate: generateOnMutateForSpec("isSubmitting", FormWrapper_Helpers)
      },
      {
        path: "firstName.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "lastName.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "email.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "password.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "passwordVisible",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "password2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    mode: useMode(),
    screen: useScreenVariants_5IBvFMcLfRf()
  });

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />
        <title key="title">{PlasmicCreateAccount.pageMetadata.title}</title>
        <meta
          key="og:title"
          property="og:title"
          content={PlasmicCreateAccount.pageMetadata.title}
        />
        <meta
          key="twitter:title"
          name="twitter:title"
          content={PlasmicCreateAccount.pageMetadata.title}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"login"}
          data-plasmic-override={overrides.login}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.login,
            {
              [projectcss.global_mode_darkMode]: hasVariant(
                globalVariants,
                "mode",
                "darkMode"
              ),
              [sty.loginglobal_mode_darkMode]: hasVariant(
                globalVariants,
                "mode",
                "darkMode"
              )
            }
          )}
        >
          <div
            data-plasmic-name={"main"}
            data-plasmic-override={overrides.main}
            className={classNames(projectcss.all, sty.main, {
              [sty.mainglobal_mode_darkMode]: hasVariant(
                globalVariants,
                "mode",
                "darkMode"
              )
            })}
          >
            <Navbar
              data-plasmic-name={"navbar"}
              data-plasmic-override={overrides.navbar}
              className={classNames("__wab_instance", sty.navbar, {
                [sty.navbarglobal_mode_darkMode]: hasVariant(
                  globalVariants,
                  "mode",
                  "darkMode"
                )
              })}
            />

            <div
              className={classNames(projectcss.all, sty.freeBox__s8VCy, {
                [sty.freeBoxglobal_mode_darkMode__s8VCyMcwt]: hasVariant(
                  globalVariants,
                  "mode",
                  "darkMode"
                )
              })}
            >
              <div
                data-plasmic-name={"breadcrumbs"}
                data-plasmic-override={overrides.breadcrumbs}
                className={classNames(projectcss.all, sty.breadcrumbs, {
                  [sty.breadcrumbsglobal_mode_darkMode]: hasVariant(
                    globalVariants,
                    "mode",
                    "darkMode"
                  )
                })}
              >
                <PlasmicLink__
                  data-plasmic-name={"link"}
                  data-plasmic-override={overrides.link}
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    projectcss.__wab_text,
                    sty.link,
                    {
                      [sty.linkglobal_mode_darkMode]: hasVariant(
                        globalVariants,
                        "mode",
                        "darkMode"
                      )
                    }
                  )}
                  component={Link}
                  href={`/`}
                  platform={"nextjs"}
                >
                  {"Home"}
                </PlasmicLink__>
                <DividerHorizontalSvgrepoComsvgIcon
                  className={classNames(projectcss.all, sty.svg__eziCs, {
                    [sty.svgglobal_mode_darkMode__eziCsMcwt]: hasVariant(
                      globalVariants,
                      "mode",
                      "darkMode"
                    )
                  })}
                  role={"img"}
                />

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___7IYpv,
                    {
                      [sty.textglobal_mode_darkMode___7IYpvMcwt]: hasVariant(
                        globalVariants,
                        "mode",
                        "darkMode"
                      )
                    }
                  )}
                >
                  {"Account"}
                </div>
              </div>
              <div
                className={classNames(projectcss.all, sty.columns__lOkX, {
                  [sty.columnsglobal_mode_darkMode__lOkXMcwt]: hasVariant(
                    globalVariants,
                    "mode",
                    "darkMode"
                  )
                })}
              >
                <div
                  className={classNames(projectcss.all, sty.column__s0DRr, {
                    [sty.columnglobal_mode_darkMode__s0DRrMcwt]: hasVariant(
                      globalVariants,
                      "mode",
                      "darkMode"
                    )
                  })}
                >
                  <PlasmicImg__
                    data-plasmic-name={"img"}
                    data-plasmic-override={overrides.img}
                    alt={""}
                    className={classNames(sty.img)}
                    displayHeight={"auto"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"auto"}
                    height={"500px"}
                    loading={"lazy"}
                    src={
                      "https://ukqvivcngvomsqjkxswo.supabase.co/storage/v1/object/public/assets/banner/login-illustrator1.png"
                    }
                    width={``}
                  />
                </div>
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.column__dE8Rn, {
                    [sty.columnglobal_mode_darkMode__dE8RnMcwt]: hasVariant(
                      globalVariants,
                      "mode",
                      "darkMode"
                    )
                  })}
                >
                  <h3
                    data-plasmic-name={"h3"}
                    data-plasmic-override={overrides.h3}
                    className={classNames(
                      projectcss.all,
                      projectcss.h3,
                      projectcss.__wab_text,
                      sty.h3,
                      {
                        [sty.h3global_mode_darkMode]: hasVariant(
                          globalVariants,
                          "mode",
                          "darkMode"
                        )
                      }
                    )}
                  >
                    {"Create Account"}
                  </h3>
                  {(() => {
                    const child$Props = {
                      className: classNames("__wab_instance", sty.form, {
                        [sty.formglobal_mode_darkMode]: hasVariant(
                          globalVariants,
                          "mode",
                          "darkMode"
                        )
                      }),
                      extendedOnValuesChange:
                        generateStateOnChangePropForCodeComponents(
                          $state,
                          "value",
                          ["form", "value"],
                          FormWrapper_Helpers
                        ),
                      formItems: [
                        { label: "Name", name: "name", inputType: "Text" },
                        {
                          label: "Message",
                          name: "message",
                          inputType: "Text Area"
                        }
                      ],
                      labelCol: (() => {
                        const __composite = {
                          span: null,
                          horizontalOnly: true
                        };
                        __composite["span"] = 8;
                        return __composite;
                      })(),

                      layout: "vertical",
                      mode: "advanced",
                      onIsSubmittingChange:
                        generateStateOnChangePropForCodeComponents(
                          $state,
                          "isSubmitting",
                          ["form", "isSubmitting"],
                          FormWrapper_Helpers
                        ),
                      ref: ref => {
                        $refs["form"] = ref;
                      },
                      requiredMark: true,
                      submitSlot: null,
                      wrapperCol: { span: 16, horizontalOnly: true }
                    };
                    initializeCodeComponentStates(
                      $state,
                      [
                        {
                          name: "value",
                          plasmicStateName: "form.value"
                        },
                        {
                          name: "isSubmitting",
                          plasmicStateName: "form.isSubmitting"
                        }
                      ],
                      [],
                      FormWrapper_Helpers ?? {},
                      child$Props
                    );

                    return (
                      <FormWrapper
                        data-plasmic-name={"form"}
                        data-plasmic-override={overrides.form}
                        {...child$Props}
                      >
                        <Stack__
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.columns__buZdt
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.column___7Ykey
                            )}
                          >
                            <FormItemWrapper
                              className={classNames(
                                "__wab_instance",
                                sty.formField__tK6JG,
                                {
                                  [sty.formFieldglobal_mode_darkMode__tK6JGMcwt]:
                                    hasVariant(
                                      globalVariants,
                                      "mode",
                                      "darkMode"
                                    )
                                }
                              )}
                              label={
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__z8IMq
                                  )}
                                >
                                  {"Name"}
                                </div>
                              }
                              name={"first-name"}
                              noLabel={true}
                              rules={[
                                {
                                  ruleType: "required",
                                  message: "First name is required"
                                }
                              ]}
                            >
                              <TextInput
                                data-plasmic-name={"firstName"}
                                data-plasmic-override={overrides.firstName}
                                className={classNames(
                                  "__wab_instance",
                                  sty.firstName
                                )}
                                onChange={(...eventArgs) => {
                                  generateStateOnChangeProp($state, [
                                    "firstName",
                                    "value"
                                  ])(
                                    (e => e.target?.value).apply(
                                      null,
                                      eventArgs
                                    )
                                  );
                                }}
                                placeholder={"First Name"}
                                required={true}
                                type={"text"}
                                value={
                                  generateStateValueProp($state, [
                                    "firstName",
                                    "value"
                                  ]) ?? ""
                                }
                              />
                            </FormItemWrapper>
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.column__rOgbR
                            )}
                          >
                            <FormItemWrapper
                              className={classNames(
                                "__wab_instance",
                                sty.formField__oMlJ5,
                                {
                                  [sty.formFieldglobal_mode_darkMode__oMlJ5Mcwt]:
                                    hasVariant(
                                      globalVariants,
                                      "mode",
                                      "darkMode"
                                    )
                                }
                              )}
                              label={
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__t1Lew
                                  )}
                                >
                                  {"Name"}
                                </div>
                              }
                              name={"last-name"}
                              noLabel={true}
                              rules={[
                                {
                                  ruleType: "required",
                                  message: "Last name is required"
                                }
                              ]}
                            >
                              <TextInput
                                data-plasmic-name={"lastName"}
                                data-plasmic-override={overrides.lastName}
                                className={classNames(
                                  "__wab_instance",
                                  sty.lastName
                                )}
                                onChange={(...eventArgs) => {
                                  generateStateOnChangeProp($state, [
                                    "lastName",
                                    "value"
                                  ])(
                                    (e => e.target?.value).apply(
                                      null,
                                      eventArgs
                                    )
                                  );
                                }}
                                placeholder={"Last Name"}
                                required={true}
                                type={"text"}
                                value={
                                  generateStateValueProp($state, [
                                    "lastName",
                                    "value"
                                  ]) ?? ""
                                }
                              />
                            </FormItemWrapper>
                          </div>
                        </Stack__>
                        <FormItemWrapper
                          className={classNames(
                            "__wab_instance",
                            sty.formField__fnkPx,
                            {
                              [sty.formFieldglobal_mode_darkMode__fnkPxMcwt]:
                                hasVariant(globalVariants, "mode", "darkMode")
                            }
                          )}
                          label={
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__ofKyz
                              )}
                            >
                              {"Name"}
                            </div>
                          }
                          name={"email"}
                          noLabel={true}
                          rules={[
                            {
                              ruleType: "required",
                              message: "Email is required"
                            },

                            {
                              ruleType: "advanced",
                              custom: (rule, value) => {
                                return (() => {
                                  const isValidEmail = input => {
                                    const emailRegex =
                                      /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
                                    return emailRegex.test(input);
                                  };
                                  return isValidEmail(value);
                                })();
                              }
                            }
                          ]}
                        >
                          <TextInput
                            data-plasmic-name={"email"}
                            data-plasmic-override={overrides.email}
                            className={classNames("__wab_instance", sty.email)}
                            onChange={(...eventArgs) => {
                              generateStateOnChangeProp($state, [
                                "email",
                                "value"
                              ])((e => e.target?.value).apply(null, eventArgs));
                            }}
                            placeholder={"Email"}
                            required={true}
                            type={"email"}
                            value={
                              generateStateValueProp($state, [
                                "email",
                                "value"
                              ]) ?? ""
                            }
                          />
                        </FormItemWrapper>
                        <FormItemWrapper
                          className={classNames(
                            "__wab_instance",
                            sty.formField__w8Hh,
                            {
                              [sty.formFieldglobal_mode_darkMode__w8HhMcwt]:
                                hasVariant(globalVariants, "mode", "darkMode")
                            }
                          )}
                          label={
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__ylyg1
                              )}
                            >
                              {"Password"}
                            </div>
                          }
                          name={"password"}
                          noLabel={true}
                          rules={[
                            {
                              ruleType: "required",
                              message: "Password is required"
                            }
                          ]}
                        >
                          <TextInput
                            data-plasmic-name={"password"}
                            data-plasmic-override={overrides.password}
                            className={classNames(
                              "__wab_instance",
                              sty.password
                            )}
                            endIcon={
                              <React.Fragment>
                                {(() => {
                                  try {
                                    return $state.passwordVisible === true;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return true;
                                    }
                                    throw e;
                                  }
                                })() ? (
                                  <div
                                    data-plasmic-name={"hidePassword"}
                                    data-plasmic-override={
                                      overrides.hidePassword
                                    }
                                    className={classNames(
                                      projectcss.all,
                                      sty.hidePassword
                                    )}
                                    onClick={async event => {
                                      const $steps = {};

                                      $steps["updatePasswordVisible"] = true
                                        ? (() => {
                                            const actionArgs = {
                                              variable: {
                                                objRoot: $state,
                                                variablePath: [
                                                  "passwordVisible"
                                                ]
                                              },
                                              operation: 4
                                            };
                                            return (({
                                              variable,
                                              value,
                                              startIndex,
                                              deleteCount
                                            }) => {
                                              if (!variable) {
                                                return;
                                              }
                                              const { objRoot, variablePath } =
                                                variable;

                                              const oldValue = $stateGet(
                                                objRoot,
                                                variablePath
                                              );
                                              $stateSet(
                                                objRoot,
                                                variablePath,
                                                !oldValue
                                              );
                                              return !oldValue;
                                            })?.apply(null, [actionArgs]);
                                          })()
                                        : undefined;
                                      if (
                                        $steps["updatePasswordVisible"] !=
                                          null &&
                                        typeof $steps[
                                          "updatePasswordVisible"
                                        ] === "object" &&
                                        typeof $steps["updatePasswordVisible"]
                                          .then === "function"
                                      ) {
                                        $steps["updatePasswordVisible"] =
                                          await $steps["updatePasswordVisible"];
                                      }
                                    }}
                                  >
                                    <EyeOffSvgrepoComsvgIcon
                                      className={classNames(
                                        projectcss.all,
                                        sty.svg__zaBps
                                      )}
                                      role={"img"}
                                    />
                                  </div>
                                ) : null}
                                {(() => {
                                  try {
                                    return $state.passwordVisible === false;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return true;
                                    }
                                    throw e;
                                  }
                                })() ? (
                                  <div
                                    data-plasmic-name={"showPassword"}
                                    data-plasmic-override={
                                      overrides.showPassword
                                    }
                                    className={classNames(
                                      projectcss.all,
                                      sty.showPassword
                                    )}
                                    onClick={async event => {
                                      const $steps = {};

                                      $steps["updatePasswordVisible"] = true
                                        ? (() => {
                                            const actionArgs = {
                                              variable: {
                                                objRoot: $state,
                                                variablePath: [
                                                  "passwordVisible"
                                                ]
                                              },
                                              operation: 4
                                            };
                                            return (({
                                              variable,
                                              value,
                                              startIndex,
                                              deleteCount
                                            }) => {
                                              if (!variable) {
                                                return;
                                              }
                                              const { objRoot, variablePath } =
                                                variable;

                                              const oldValue = $stateGet(
                                                objRoot,
                                                variablePath
                                              );
                                              $stateSet(
                                                objRoot,
                                                variablePath,
                                                !oldValue
                                              );
                                              return !oldValue;
                                            })?.apply(null, [actionArgs]);
                                          })()
                                        : undefined;
                                      if (
                                        $steps["updatePasswordVisible"] !=
                                          null &&
                                        typeof $steps[
                                          "updatePasswordVisible"
                                        ] === "object" &&
                                        typeof $steps["updatePasswordVisible"]
                                          .then === "function"
                                      ) {
                                        $steps["updatePasswordVisible"] =
                                          await $steps["updatePasswordVisible"];
                                      }
                                    }}
                                  >
                                    <EyeShowSvgrepoComsvgIcon
                                      className={classNames(
                                        projectcss.all,
                                        sty.svg__hgYi
                                      )}
                                      role={"img"}
                                    />
                                  </div>
                                ) : null}
                              </React.Fragment>
                            }
                            onChange={(...eventArgs) => {
                              generateStateOnChangeProp($state, [
                                "password",
                                "value"
                              ])((e => e.target?.value).apply(null, eventArgs));
                            }}
                            placeholder={"Password"}
                            required={true}
                            showEndIcon={true}
                            type={(() => {
                              try {
                                return $state.passwordVisible
                                  ? "text"
                                  : "password";
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "password";
                                }
                                throw e;
                              }
                            })()}
                            value={
                              generateStateValueProp($state, [
                                "password",
                                "value"
                              ]) ?? ""
                            }
                          />
                        </FormItemWrapper>
                        <FormItemWrapper
                          className={classNames(
                            "__wab_instance",
                            sty.formField__xr3Ff,
                            {
                              [sty.formFieldglobal_mode_darkMode__xr3FfMcwt]:
                                hasVariant(globalVariants, "mode", "darkMode")
                            }
                          )}
                          label={
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__hP9U1
                              )}
                            >
                              {"Password"}
                            </div>
                          }
                          name={"password"}
                          noLabel={true}
                          rules={[
                            {
                              ruleType: "required",
                              message: "Password is required",
                              options: (() => {
                                const __composite = [{ value: null }];
                                __composite["0"]["value"] = undefined;
                                return __composite;
                              })()
                            }
                          ]}
                        >
                          <TextInput
                            data-plasmic-name={"password2"}
                            data-plasmic-override={overrides.password2}
                            className={classNames(
                              "__wab_instance",
                              sty.password2
                            )}
                            endIcon={
                              <React.Fragment>
                                {(() => {
                                  try {
                                    return $state.passwordVisible === true;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return true;
                                    }
                                    throw e;
                                  }
                                })() ? (
                                  <div
                                    data-plasmic-name={"hidePassword2"}
                                    data-plasmic-override={
                                      overrides.hidePassword2
                                    }
                                    className={classNames(
                                      projectcss.all,
                                      sty.hidePassword2
                                    )}
                                    onClick={async event => {
                                      const $steps = {};

                                      $steps["updatePasswordVisible"] = true
                                        ? (() => {
                                            const actionArgs = {
                                              variable: {
                                                objRoot: $state,
                                                variablePath: [
                                                  "passwordVisible"
                                                ]
                                              },
                                              operation: 4
                                            };
                                            return (({
                                              variable,
                                              value,
                                              startIndex,
                                              deleteCount
                                            }) => {
                                              if (!variable) {
                                                return;
                                              }
                                              const { objRoot, variablePath } =
                                                variable;

                                              const oldValue = $stateGet(
                                                objRoot,
                                                variablePath
                                              );
                                              $stateSet(
                                                objRoot,
                                                variablePath,
                                                !oldValue
                                              );
                                              return !oldValue;
                                            })?.apply(null, [actionArgs]);
                                          })()
                                        : undefined;
                                      if (
                                        $steps["updatePasswordVisible"] !=
                                          null &&
                                        typeof $steps[
                                          "updatePasswordVisible"
                                        ] === "object" &&
                                        typeof $steps["updatePasswordVisible"]
                                          .then === "function"
                                      ) {
                                        $steps["updatePasswordVisible"] =
                                          await $steps["updatePasswordVisible"];
                                      }
                                    }}
                                  >
                                    <EyeOffSvgrepoComsvgIcon
                                      className={classNames(
                                        projectcss.all,
                                        sty.svg__umCfL
                                      )}
                                      role={"img"}
                                    />
                                  </div>
                                ) : null}
                                {(() => {
                                  try {
                                    return $state.passwordVisible === false;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return true;
                                    }
                                    throw e;
                                  }
                                })() ? (
                                  <div
                                    data-plasmic-name={"showPassword2"}
                                    data-plasmic-override={
                                      overrides.showPassword2
                                    }
                                    className={classNames(
                                      projectcss.all,
                                      sty.showPassword2
                                    )}
                                    onClick={async event => {
                                      const $steps = {};

                                      $steps["updatePasswordVisible"] = true
                                        ? (() => {
                                            const actionArgs = {
                                              variable: {
                                                objRoot: $state,
                                                variablePath: [
                                                  "passwordVisible"
                                                ]
                                              },
                                              operation: 4
                                            };
                                            return (({
                                              variable,
                                              value,
                                              startIndex,
                                              deleteCount
                                            }) => {
                                              if (!variable) {
                                                return;
                                              }
                                              const { objRoot, variablePath } =
                                                variable;

                                              const oldValue = $stateGet(
                                                objRoot,
                                                variablePath
                                              );
                                              $stateSet(
                                                objRoot,
                                                variablePath,
                                                !oldValue
                                              );
                                              return !oldValue;
                                            })?.apply(null, [actionArgs]);
                                          })()
                                        : undefined;
                                      if (
                                        $steps["updatePasswordVisible"] !=
                                          null &&
                                        typeof $steps[
                                          "updatePasswordVisible"
                                        ] === "object" &&
                                        typeof $steps["updatePasswordVisible"]
                                          .then === "function"
                                      ) {
                                        $steps["updatePasswordVisible"] =
                                          await $steps["updatePasswordVisible"];
                                      }
                                    }}
                                  >
                                    <EyeShowSvgrepoComsvgIcon
                                      className={classNames(
                                        projectcss.all,
                                        sty.svg__u8Us2
                                      )}
                                      role={"img"}
                                    />
                                  </div>
                                ) : null}
                              </React.Fragment>
                            }
                            onChange={(...eventArgs) => {
                              generateStateOnChangeProp($state, [
                                "password2",
                                "value"
                              ])((e => e.target?.value).apply(null, eventArgs));
                            }}
                            placeholder={"Confirm Password"}
                            required={true}
                            showEndIcon={true}
                            type={(() => {
                              try {
                                return $state.passwordVisible
                                  ? "text"
                                  : "password";
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "password";
                                }
                                throw e;
                              }
                            })()}
                            value={
                              generateStateValueProp($state, [
                                "password2",
                                "value"
                              ]) ?? ""
                            }
                          />
                        </FormItemWrapper>
                        <Stack__
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__gm8Uq,
                            {
                              [sty.freeBoxglobal_mode_darkMode__gm8UqMcwt]:
                                hasVariant(globalVariants, "mode", "darkMode")
                            }
                          )}
                        >
                          <AntdButton
                            data-plasmic-name={"button"}
                            data-plasmic-override={overrides.button}
                            className={classNames("__wab_instance", sty.button)}
                            size={"large"}
                            submitsForm={true}
                            type={"primary"}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__drcSt
                              )}
                            >
                              {"Create Account"}
                            </div>
                          </AntdButton>
                          <ButtonSec
                            data-plasmic-name={"buttonSec"}
                            data-plasmic-override={overrides.buttonSec}
                            className={classNames(
                              "__wab_instance",
                              sty.buttonSec
                            )}
                            link={`/login`}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__k6HsE
                              )}
                            >
                              {"Log in"}
                            </div>
                          </ButtonSec>
                        </Stack__>
                      </FormWrapper>
                    );
                  })()}
                </Stack__>
              </div>
            </div>
          </div>
          <Footer
            data-plasmic-name={"footer"}
            data-plasmic-override={overrides.footer}
            className={classNames("__wab_instance", sty.footer, {
              [sty.footerglobal_mode_darkMode]: hasVariant(
                globalVariants,
                "mode",
                "darkMode"
              )
            })}
          />
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  login: [
    "login",
    "main",
    "navbar",
    "breadcrumbs",
    "link",
    "img",
    "h3",
    "form",
    "firstName",
    "lastName",
    "email",
    "password",
    "hidePassword",
    "showPassword",
    "password2",
    "hidePassword2",
    "showPassword2",
    "button",
    "buttonSec",
    "footer"
  ],
  main: [
    "main",
    "navbar",
    "breadcrumbs",
    "link",
    "img",
    "h3",
    "form",
    "firstName",
    "lastName",
    "email",
    "password",
    "hidePassword",
    "showPassword",
    "password2",
    "hidePassword2",
    "showPassword2",
    "button",
    "buttonSec"
  ],
  navbar: ["navbar"],
  breadcrumbs: ["breadcrumbs", "link"],
  link: ["link"],
  img: ["img"],
  h3: ["h3"],
  form: [
    "form",
    "firstName",
    "lastName",
    "email",
    "password",
    "hidePassword",
    "showPassword",
    "password2",
    "hidePassword2",
    "showPassword2",
    "button",
    "buttonSec"
  ],
  firstName: ["firstName"],
  lastName: ["lastName"],
  email: ["email"],
  password: ["password", "hidePassword", "showPassword"],
  hidePassword: ["hidePassword"],
  showPassword: ["showPassword"],
  password2: ["password2", "hidePassword2", "showPassword2"],
  hidePassword2: ["hidePassword2"],
  showPassword2: ["showPassword2"],
  button: ["button"],
  buttonSec: ["buttonSec"],
  footer: ["footer"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  login: "div";
  main: "div";
  navbar: typeof Navbar;
  breadcrumbs: "div";
  link: "a";
  img: typeof PlasmicImg__;
  h3: "h3";
  form: typeof FormWrapper;
  firstName: typeof TextInput;
  lastName: typeof TextInput;
  email: typeof TextInput;
  password: typeof TextInput;
  hidePassword: "div";
  showPassword: "div";
  password2: typeof TextInput;
  hidePassword2: "div";
  showPassword2: "div";
  button: typeof AntdButton;
  buttonSec: typeof ButtonSec;
  footer: typeof Footer;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicCreateAccount__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicCreateAccount__VariantsArgs;
    args?: PlasmicCreateAccount__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicCreateAccount__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicCreateAccount__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicCreateAccount__ArgProps,
          internalVariantPropNames: PlasmicCreateAccount__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicCreateAccount__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "login") {
    func.displayName = "PlasmicCreateAccount";
  } else {
    func.displayName = `PlasmicCreateAccount.${nodeName}`;
  }
  return func;
}

export const PlasmicCreateAccount = Object.assign(
  // Top-level PlasmicCreateAccount renders the root element
  makeNodeComponent("login"),
  {
    // Helper components rendering sub-elements
    main: makeNodeComponent("main"),
    navbar: makeNodeComponent("navbar"),
    breadcrumbs: makeNodeComponent("breadcrumbs"),
    link: makeNodeComponent("link"),
    img: makeNodeComponent("img"),
    h3: makeNodeComponent("h3"),
    form: makeNodeComponent("form"),
    firstName: makeNodeComponent("firstName"),
    lastName: makeNodeComponent("lastName"),
    email: makeNodeComponent("email"),
    password: makeNodeComponent("password"),
    hidePassword: makeNodeComponent("hidePassword"),
    showPassword: makeNodeComponent("showPassword"),
    password2: makeNodeComponent("password2"),
    hidePassword2: makeNodeComponent("hidePassword2"),
    showPassword2: makeNodeComponent("showPassword2"),
    button: makeNodeComponent("button"),
    buttonSec: makeNodeComponent("buttonSec"),
    footer: makeNodeComponent("footer"),

    // Metadata about props expected for PlasmicCreateAccount
    internalVariantProps: PlasmicCreateAccount__VariantProps,
    internalArgProps: PlasmicCreateAccount__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "Login - Kitabu",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicCreateAccount;
/* prettier-ignore-end */
