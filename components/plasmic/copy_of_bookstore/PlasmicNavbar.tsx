// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 5RiFpwPZc2Ux6gBUCfunxc
// Component: fRobOPq7Dpvn

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import ShopNowButton from "../../ShopNowButton"; // plasmic-import: 5z_cK2GH5C_7/component
import DrawerCategories from "../../DrawerCategories"; // plasmic-import: vNKnVuMZa9sL/component
import TextInput from "../../TextInput"; // plasmic-import: 1r6uaKWmO0wZ/component
import DrawerCart from "../../DrawerCart"; // plasmic-import: 0-OmNRgWAO0e/component
import Dialog from "../../Dialog"; // plasmic-import: RAs3CXxcw7yL/component
import Button from "../../Button"; // plasmic-import: 7BMeq4z7zmfO/component
import { SliderWrapper } from "@plasmicpkgs/react-slick";
import { sliderHelpers as SliderWrapper_Helpers } from "@plasmicpkgs/react-slick";
import DrawerAccount from "../../DrawerAccount"; // plasmic-import: 5-lgTWEvw2Is/component

import { useScreenVariants as useScreenVariants_5IBvFMcLfRf } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: 5I_bvFMcLfRF/globalVariant
import { ModeValue, useMode } from "./PlasmicGlobalVariant__Mode"; // plasmic-import: pQjhaJ-jelU4/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 5RiFpwPZc2Ux6gBUCfunxc/projectcss
import sty from "./PlasmicNavbar.module.css"; // plasmic-import: fRobOPq7Dpvn/css

import Menu02SvgrepoComsvg2Icon from "./icons/PlasmicIcon__Menu02SvgrepoComsvg2"; // plasmic-import: L4KiP5GOmTFl/icon
import SearchsvgIcon from "./icons/PlasmicIcon__Searchsvg"; // plasmic-import: eYi9E-VIhoCf/icon
import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: s1EkJXkJAaVo/icon
import LightModeSvgrepoComsvgIcon from "./icons/PlasmicIcon__LightModeSvgrepoComsvg"; // plasmic-import: gkNj7lYQnTKR/icon
import DarkModeSvgrepoComsvgIcon from "./icons/PlasmicIcon__DarkModeSvgrepoComsvg"; // plasmic-import: Lhd_P-gC5rwq/icon
import UserSvgrepoComsvgIcon from "./icons/PlasmicIcon__UserSvgrepoComsvg"; // plasmic-import: r2KIHgquH71_/icon
import CartShoppingSvgrepoComsvgIcon from "./icons/PlasmicIcon__CartShoppingSvgrepoComsvg"; // plasmic-import: Ls0iu62eS39w/icon
import HotSvgrepoComsvgIcon from "./icons/PlasmicIcon__HotSvgrepoComsvg"; // plasmic-import: PrdEPozKRIsa/icon
import StarBlackSvgrepoComsvgIcon from "./icons/PlasmicIcon__StarBlackSvgrepoComsvg"; // plasmic-import: 9KdmNr08-8s0/icon
import CrownSvgrepoComsvgIcon from "./icons/PlasmicIcon__CrownSvgrepoComsvg"; // plasmic-import: ooV-W9Q2RuWT/icon
import ArrowDown338SvgrepoComsvgIcon from "./icons/PlasmicIcon__ArrowDown338SvgrepoComsvg"; // plasmic-import: j7j0BDLSARTb/icon

createPlasmicElementProxy;

export type PlasmicNavbar__VariantMembers = {};
export type PlasmicNavbar__VariantsArgs = {};
type VariantPropType = keyof PlasmicNavbar__VariantsArgs;
export const PlasmicNavbar__VariantProps = new Array<VariantPropType>();

export type PlasmicNavbar__ArgsType = {};
type ArgPropType = keyof PlasmicNavbar__ArgsType;
export const PlasmicNavbar__ArgProps = new Array<ArgPropType>();

export type PlasmicNavbar__OverridesType = {
  root?: Flex__<"div">;
  headerLeftItems?: Flex__<"div">;
  logo?: Flex__<"a"> & Partial<LinkProps>;
  img?: Flex__<typeof PlasmicImg__>;
  shopNowButton?: Flex__<typeof ShopNowButton>;
  drawerCategories2?: Flex__<typeof DrawerCategories>;
  textInput?: Flex__<typeof TextInput>;
  headerRightItems?: Flex__<"div">;
  account?: Flex__<"div">;
  icon?: Flex__<"svg">;
  cart?: Flex__<"div">;
  drawerCart?: Flex__<typeof DrawerCart>;
  mainSearch?: Flex__<typeof TextInput>;
  hotDeals?: Flex__<"a"> & Partial<LinkProps>;
  whatsNew?: Flex__<"a"> & Partial<LinkProps>;
  bestsellers?: Flex__<"a"> & Partial<LinkProps>;
  helpCenter?: Flex__<"a"> & Partial<LinkProps>;
  trackOrder?: Flex__<"a"> & Partial<LinkProps>;
  dialog?: Flex__<typeof Dialog>;
  button?: Flex__<typeof Button>;
  drawerAccount?: Flex__<typeof DrawerAccount>;
};

export interface DefaultNavbarProps {
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicNavbar__RenderFunc(props: {
  variants: PlasmicNavbar__VariantsArgs;
  args: PlasmicNavbar__ArgsType;
  overrides: PlasmicNavbar__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "textInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "mainSearch.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "drawerCart.openDrawerCart2",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "drawerCategories2.openDrawerCategory",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "dialog.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          hasVariant(globalVariants, "mode", "darkMode") ? false : false
      },
      {
        path: "drawerAccount.openDrawerAccount",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "sliderCarousel.currentSlide",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0,

        onMutate: generateOnMutateForSpec("currentSlide", SliderWrapper_Helpers)
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants_5IBvFMcLfRf(),
    mode: useMode()
  });

  return (
    <Stack__
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.root,
        {
          [projectcss.global_mode_darkMode]: hasVariant(
            globalVariants,
            "mode",
            "darkMode"
          ),
          [sty.rootglobal_mode_darkMode]: hasVariant(
            globalVariants,
            "mode",
            "darkMode"
          )
        }
      )}
    >
      <div
        className={classNames(projectcss.all, sty.freeBox__g2Ycr, {
          [sty.freeBoxglobal_mode_darkMode__g2YcrMcwt]: hasVariant(
            globalVariants,
            "mode",
            "darkMode"
          )
        })}
      >
        <Stack__
          as={"div"}
          data-plasmic-name={"headerLeftItems"}
          data-plasmic-override={overrides.headerLeftItems}
          hasGap={true}
          className={classNames(projectcss.all, sty.headerLeftItems, {
            [sty.headerLeftItemsglobal_mode_darkMode]: hasVariant(
              globalVariants,
              "mode",
              "darkMode"
            )
          })}
        >
          <div
            className={classNames(projectcss.all, sty.freeBox__j4Dz5)}
            onClick={async event => {
              const $steps = {};

              $steps["updateDrawerCategories2OpenDrawerCategory"] = true
                ? (() => {
                    const actionArgs = {
                      variable: {
                        objRoot: $state,
                        variablePath: [
                          "drawerCategories2",
                          "openDrawerCategory"
                        ]
                      },
                      operation: 4
                    };
                    return (({ variable, value, startIndex, deleteCount }) => {
                      if (!variable) {
                        return;
                      }
                      const { objRoot, variablePath } = variable;

                      const oldValue = $stateGet(objRoot, variablePath);
                      $stateSet(objRoot, variablePath, !oldValue);
                      return !oldValue;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["updateDrawerCategories2OpenDrawerCategory"] != null &&
                typeof $steps["updateDrawerCategories2OpenDrawerCategory"] ===
                  "object" &&
                typeof $steps["updateDrawerCategories2OpenDrawerCategory"]
                  .then === "function"
              ) {
                $steps["updateDrawerCategories2OpenDrawerCategory"] =
                  await $steps["updateDrawerCategories2OpenDrawerCategory"];
              }
            }}
          >
            {(
              hasVariant(globalVariants, "screen", "tablet")
                ? (() => {
                    try {
                      return true;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return true;
                      }
                      throw e;
                    }
                  })()
                : true
            ) ? (
              <Menu02SvgrepoComsvg2Icon
                className={classNames(projectcss.all, sty.svg__ve6Tw, {
                  [sty.svgglobal_mode_darkMode__ve6TwMcwt]: hasVariant(
                    globalVariants,
                    "mode",
                    "darkMode"
                  )
                })}
                role={"img"}
              />
            ) : null}
          </div>
          <PlasmicLink__
            data-plasmic-name={"logo"}
            data-plasmic-override={overrides.logo}
            className={classNames(projectcss.all, projectcss.a, sty.logo)}
            component={Link}
            href={`/`}
            platform={"nextjs"}
          >
            <PlasmicImg__
              data-plasmic-name={"img"}
              data-plasmic-override={overrides.img}
              alt={""}
              className={classNames(sty.img)}
              displayHeight={"35px"}
              displayMaxHeight={"none"}
              displayMaxWidth={"100%"}
              displayMinHeight={"0"}
              displayMinWidth={"0"}
              displayWidth={"120px"}
              height={"35"}
              loading={"lazy"}
              src={
                "https://h2g13ydp8iq17z7f.public.blob.vercel-storage.com/Logo/kitabu.ke%20logo-7wewzFysxJyGutwlOf9E5Z2DAbNQHG.png"
              }
              width={"120"}
            />
          </PlasmicLink__>
          <ShopNowButton
            data-plasmic-name={"shopNowButton"}
            data-plasmic-override={overrides.shopNowButton}
            className={classNames("__wab_instance", sty.shopNowButton)}
            onClick={async event => {
              const $steps = {};

              $steps["updateDrawerCategories2OpenDrawerCategory"] = true
                ? (() => {
                    const actionArgs = {
                      variable: {
                        objRoot: $state,
                        variablePath: [
                          "drawerCategories2",
                          "openDrawerCategory"
                        ]
                      },
                      operation: 4
                    };
                    return (({ variable, value, startIndex, deleteCount }) => {
                      if (!variable) {
                        return;
                      }
                      const { objRoot, variablePath } = variable;

                      const oldValue = $stateGet(objRoot, variablePath);
                      $stateSet(objRoot, variablePath, !oldValue);
                      return !oldValue;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["updateDrawerCategories2OpenDrawerCategory"] != null &&
                typeof $steps["updateDrawerCategories2OpenDrawerCategory"] ===
                  "object" &&
                typeof $steps["updateDrawerCategories2OpenDrawerCategory"]
                  .then === "function"
              ) {
                $steps["updateDrawerCategories2OpenDrawerCategory"] =
                  await $steps["updateDrawerCategories2OpenDrawerCategory"];
              }
            }}
          />

          <DrawerCategories
            data-plasmic-name={"drawerCategories2"}
            data-plasmic-override={overrides.drawerCategories2}
            className={classNames("__wab_instance", sty.drawerCategories2)}
            onOpenDrawerCategoryChange={generateStateOnChangeProp($state, [
              "drawerCategories2",
              "openDrawerCategory"
            ])}
            openDrawerCategory={generateStateValueProp($state, [
              "drawerCategories2",
              "openDrawerCategory"
            ])}
          />

          <TextInput
            data-plasmic-name={"textInput"}
            data-plasmic-override={overrides.textInput}
            className={classNames("__wab_instance", sty.textInput, {
              [sty.textInputglobal_mode_darkMode]: hasVariant(
                globalVariants,
                "mode",
                "darkMode"
              )
            })}
            onChange={(...eventArgs) => {
              generateStateOnChangeProp($state, ["textInput", "value"])(
                (e => e.target?.value).apply(null, eventArgs)
              );
            }}
            placeholder={"Search products, categories and brands"}
            value={generateStateValueProp($state, ["textInput", "value"]) ?? ""}
          />
        </Stack__>
        <div
          data-plasmic-name={"headerRightItems"}
          data-plasmic-override={overrides.headerRightItems}
          className={classNames(projectcss.all, sty.headerRightItems)}
        >
          <div className={classNames(projectcss.all, sty.freeBox__ezaBb)}>
            <LightModeSvgrepoComsvgIcon
              className={classNames(projectcss.all, sty.svg___6N6J, {
                [sty.svgglobal_mode_darkMode___6N6JMcwt]: hasVariant(
                  globalVariants,
                  "mode",
                  "darkMode"
                )
              })}
              onClick={async event => {
                const $steps = {};

                $steps["updateVariant"] = true
                  ? (() => {
                      const actionArgs = {};
                      return (({ vgroup, value }) => {
                        if (typeof value === "string") {
                          value = [value];
                        }
                        undefined;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateVariant"] != null &&
                  typeof $steps["updateVariant"] === "object" &&
                  typeof $steps["updateVariant"].then === "function"
                ) {
                  $steps["updateVariant"] = await $steps["updateVariant"];
                }
              }}
              role={"img"}
            />

            <DarkModeSvgrepoComsvgIcon
              className={classNames(projectcss.all, sty.svg__w6HEd, {
                [sty.svgglobal_mode_darkMode__w6HEdMcwt]: hasVariant(
                  globalVariants,
                  "mode",
                  "darkMode"
                )
              })}
              onClick={async event => {
                const $steps = {};

                $steps["updateTextInputValue"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["textInput", "value"]
                        },
                        operation: 0
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateTextInputValue"] != null &&
                  typeof $steps["updateTextInputValue"] === "object" &&
                  typeof $steps["updateTextInputValue"].then === "function"
                ) {
                  $steps["updateTextInputValue"] = await $steps[
                    "updateTextInputValue"
                  ];
                }
              }}
              role={"img"}
            />
          </div>
          <div
            data-plasmic-name={"account"}
            data-plasmic-override={overrides.account}
            className={classNames(projectcss.all, sty.account)}
            onClick={async event => {
              const $steps = {};

              $steps["updateDrawerAccountOpenDrawerAccount"] = true
                ? (() => {
                    const actionArgs = {
                      variable: {
                        objRoot: $state,
                        variablePath: ["drawerAccount", "openDrawerAccount"]
                      },
                      operation: 4
                    };
                    return (({ variable, value, startIndex, deleteCount }) => {
                      if (!variable) {
                        return;
                      }
                      const { objRoot, variablePath } = variable;

                      const oldValue = $stateGet(objRoot, variablePath);
                      $stateSet(objRoot, variablePath, !oldValue);
                      return !oldValue;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["updateDrawerAccountOpenDrawerAccount"] != null &&
                typeof $steps["updateDrawerAccountOpenDrawerAccount"] ===
                  "object" &&
                typeof $steps["updateDrawerAccountOpenDrawerAccount"].then ===
                  "function"
              ) {
                $steps["updateDrawerAccountOpenDrawerAccount"] = await $steps[
                  "updateDrawerAccountOpenDrawerAccount"
                ];
              }
            }}
          >
            <UserSvgrepoComsvgIcon
              data-plasmic-name={"icon"}
              data-plasmic-override={overrides.icon}
              className={classNames(projectcss.all, sty.icon, {
                [sty.iconglobal_mode_darkMode]: hasVariant(
                  globalVariants,
                  "mode",
                  "darkMode"
                )
              })}
              role={"img"}
            />

            <div className={classNames(projectcss.all, sty.freeBox__kv9Fg)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___4Te6,
                  {
                    [sty.textglobal_mode_darkMode___4Te6Mcwt]: hasVariant(
                      globalVariants,
                      "mode",
                      "darkMode"
                    )
                  }
                )}
              >
                {"Welcome"}
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__z1Nrh,
                  {
                    [sty.textglobal_mode_darkMode__z1NrhMcwt]: hasVariant(
                      globalVariants,
                      "mode",
                      "darkMode"
                    )
                  }
                )}
              >
                {"Sign in / Register"}
              </div>
            </div>
          </div>
          <div
            data-plasmic-name={"cart"}
            data-plasmic-override={overrides.cart}
            className={classNames(projectcss.all, sty.cart)}
            onClick={async event => {
              const $steps = {};

              $steps["updateDrawerCartOpenDrawerCart2"] = true
                ? (() => {
                    const actionArgs = {
                      variable: {
                        objRoot: $state,
                        variablePath: ["drawerCart", "openDrawerCart2"]
                      },
                      operation: 4
                    };
                    return (({ variable, value, startIndex, deleteCount }) => {
                      if (!variable) {
                        return;
                      }
                      const { objRoot, variablePath } = variable;

                      const oldValue = $stateGet(objRoot, variablePath);
                      $stateSet(objRoot, variablePath, !oldValue);
                      return !oldValue;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["updateDrawerCartOpenDrawerCart2"] != null &&
                typeof $steps["updateDrawerCartOpenDrawerCart2"] === "object" &&
                typeof $steps["updateDrawerCartOpenDrawerCart2"].then ===
                  "function"
              ) {
                $steps["updateDrawerCartOpenDrawerCart2"] = await $steps[
                  "updateDrawerCartOpenDrawerCart2"
                ];
              }
            }}
          >
            <CartShoppingSvgrepoComsvgIcon
              className={classNames(projectcss.all, sty.svg__zuvUk, {
                [sty.svgglobal_mode_darkMode__zuvUkMcwt]: hasVariant(
                  globalVariants,
                  "mode",
                  "darkMode"
                )
              })}
              role={"img"}
            />

            <div className={classNames(projectcss.all, sty.freeBox__bgIvy)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__rZzUx
                )}
              >
                {"2"}
              </div>
            </div>
          </div>
        </div>
      </div>
      <DrawerCart
        data-plasmic-name={"drawerCart"}
        data-plasmic-override={overrides.drawerCart}
        className={classNames("__wab_instance", sty.drawerCart)}
        onOpenDrawerCartChange={generateStateOnChangeProp($state, [
          "drawerCart",
          "openDrawerCart2"
        ])}
        openDrawerCart={false}
        openDrawerCart2={generateStateValueProp($state, [
          "drawerCart",
          "openDrawerCart2"
        ])}
      />

      <div className={classNames(projectcss.all, sty.freeBox__qh9YO)}>
        <TextInput
          data-plasmic-name={"mainSearch"}
          data-plasmic-override={overrides.mainSearch}
          className={classNames("__wab_instance", sty.mainSearch)}
          onChange={(...eventArgs) => {
            generateStateOnChangeProp($state, ["mainSearch", "value"])(
              (e => e.target?.value).apply(null, eventArgs)
            );
          }}
          placeholder={"Search products, categories and brands"}
          value={generateStateValueProp($state, ["mainSearch", "value"]) ?? ""}
        />

        <div
          className={classNames(projectcss.all, sty.freeBox__sDyMl, {
            [sty.freeBoxglobal_mode_darkMode__sDyMlMcwt]: hasVariant(
              globalVariants,
              "mode",
              "darkMode"
            )
          })}
        >
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__lOqAc, {
              [sty.freeBoxglobal_mode_darkMode__lOqAcMcwt]: hasVariant(
                globalVariants,
                "mode",
                "darkMode"
              )
            })}
          >
            <Stack__
              as={PlasmicLink__}
              data-plasmic-name={"hotDeals"}
              data-plasmic-override={overrides.hotDeals}
              hasGap={true}
              className={classNames(projectcss.all, projectcss.a, sty.hotDeals)}
              component={Link}
              platform={"nextjs"}
            >
              <HotSvgrepoComsvgIcon
                className={classNames(projectcss.all, sty.svg__kmrhi, {
                  [sty.svgglobal_mode_darkMode__kmrhiMcwt]: hasVariant(
                    globalVariants,
                    "mode",
                    "darkMode"
                  )
                })}
                role={"img"}
              />

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__wYaU6,
                  {
                    [sty.textglobal_mode_darkMode__wYaU6Mcwt]: hasVariant(
                      globalVariants,
                      "mode",
                      "darkMode"
                    )
                  }
                )}
              >
                {"Hot Deals"}
              </div>
            </Stack__>
            <Stack__
              as={PlasmicLink__}
              data-plasmic-name={"whatsNew"}
              data-plasmic-override={overrides.whatsNew}
              hasGap={true}
              className={classNames(projectcss.all, projectcss.a, sty.whatsNew)}
              component={Link}
              platform={"nextjs"}
            >
              <StarBlackSvgrepoComsvgIcon
                className={classNames(projectcss.all, sty.svg___7EvP3, {
                  [sty.svgglobal_mode_darkMode___7EvP3Mcwt]: hasVariant(
                    globalVariants,
                    "mode",
                    "darkMode"
                  )
                })}
                role={"img"}
              />

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__uhKHf,
                  {
                    [sty.textglobal_mode_darkMode__uhKHfMcwt]: hasVariant(
                      globalVariants,
                      "mode",
                      "darkMode"
                    )
                  }
                )}
              >
                {"What's New"}
              </div>
            </Stack__>
            <Stack__
              as={PlasmicLink__}
              data-plasmic-name={"bestsellers"}
              data-plasmic-override={overrides.bestsellers}
              hasGap={true}
              className={classNames(
                projectcss.all,
                projectcss.a,
                sty.bestsellers
              )}
              component={Link}
              platform={"nextjs"}
            >
              <CrownSvgrepoComsvgIcon
                className={classNames(projectcss.all, sty.svg__vjc5F, {
                  [sty.svgglobal_mode_darkMode__vjc5FMcwt]: hasVariant(
                    globalVariants,
                    "mode",
                    "darkMode"
                  )
                })}
                role={"img"}
              />

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__cQfqr,
                  {
                    [sty.textglobal_mode_darkMode__cQfqrMcwt]: hasVariant(
                      globalVariants,
                      "mode",
                      "darkMode"
                    )
                  }
                )}
              >
                {"Bestsellers"}
              </div>
            </Stack__>
          </Stack__>
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__wesPs)}
          >
            <Stack__
              as={PlasmicLink__}
              data-plasmic-name={"helpCenter"}
              data-plasmic-override={overrides.helpCenter}
              hasGap={true}
              className={classNames(
                projectcss.all,
                projectcss.a,
                sty.helpCenter
              )}
              component={Link}
              platform={"nextjs"}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__edXn5,
                  {
                    [sty.textglobal_mode_darkMode__edXn5Mcwt]: hasVariant(
                      globalVariants,
                      "mode",
                      "darkMode"
                    )
                  }
                )}
              >
                {"Help Center"}
              </div>
            </Stack__>
            <Stack__
              as={PlasmicLink__}
              data-plasmic-name={"trackOrder"}
              data-plasmic-override={overrides.trackOrder}
              hasGap={true}
              className={classNames(
                projectcss.all,
                projectcss.a,
                sty.trackOrder
              )}
              component={Link}
              platform={"nextjs"}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__ahvRj,
                  {
                    [sty.textglobal_mode_darkMode__ahvRjMcwt]: hasVariant(
                      globalVariants,
                      "mode",
                      "darkMode"
                    )
                  }
                )}
              >
                {"Track Order"}
              </div>
            </Stack__>
            <Dialog
              data-plasmic-name={"dialog"}
              data-plasmic-override={overrides.dialog}
              className={classNames("__wab_instance", sty.dialog, {
                [sty.dialogglobal_mode_darkMode]: hasVariant(
                  globalVariants,
                  "mode",
                  "darkMode"
                )
              })}
              onOpenChange={generateStateOnChangeProp($state, [
                "dialog",
                "open"
              ])}
              open={generateStateValueProp($state, ["dialog", "open"])}
              trigger={
                <Button
                  data-plasmic-name={"button"}
                  data-plasmic-override={overrides.button}
                  className={classNames("__wab_instance", sty.button, {
                    [sty.buttonglobal_mode_darkMode]: hasVariant(
                      globalVariants,
                      "mode",
                      "darkMode"
                    )
                  })}
                  color={
                    hasVariant(globalVariants, "mode", "darkMode")
                      ? "linkDefaultText"
                      : "linkDefaultText"
                  }
                  endIcon={
                    <ArrowDown338SvgrepoComsvgIcon
                      className={classNames(projectcss.all, sty.svg__aBapX)}
                      role={"img"}
                    />
                  }
                  showEndIcon={true}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__w09XR,
                      {
                        [sty.textglobal_mode_darkMode__w09XRMcwt]: hasVariant(
                          globalVariants,
                          "mode",
                          "darkMode"
                        )
                      }
                    )}
                  >
                    {"Browsing History"}
                  </div>
                </Button>
              }
            />
          </Stack__>
        </div>
      </div>
      <DrawerAccount
        data-plasmic-name={"drawerAccount"}
        data-plasmic-override={overrides.drawerAccount}
        className={classNames("__wab_instance", sty.drawerAccount)}
        onOpenDrawerAccountChange={generateStateOnChangeProp($state, [
          "drawerAccount",
          "openDrawerAccount"
        ])}
        openDrawerAccount={generateStateValueProp($state, [
          "drawerAccount",
          "openDrawerAccount"
        ])}
      />
    </Stack__>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "headerLeftItems",
    "logo",
    "img",
    "shopNowButton",
    "drawerCategories2",
    "textInput",
    "headerRightItems",
    "account",
    "icon",
    "cart",
    "drawerCart",
    "mainSearch",
    "hotDeals",
    "whatsNew",
    "bestsellers",
    "helpCenter",
    "trackOrder",
    "dialog",
    "button",
    "drawerAccount"
  ],
  headerLeftItems: [
    "headerLeftItems",
    "logo",
    "img",
    "shopNowButton",
    "drawerCategories2",
    "textInput"
  ],
  logo: ["logo", "img"],
  img: ["img"],
  shopNowButton: ["shopNowButton"],
  drawerCategories2: ["drawerCategories2"],
  textInput: ["textInput"],
  headerRightItems: ["headerRightItems", "account", "icon", "cart"],
  account: ["account", "icon"],
  icon: ["icon"],
  cart: ["cart"],
  drawerCart: ["drawerCart"],
  mainSearch: ["mainSearch"],
  hotDeals: ["hotDeals"],
  whatsNew: ["whatsNew"],
  bestsellers: ["bestsellers"],
  helpCenter: ["helpCenter"],
  trackOrder: ["trackOrder"],
  dialog: ["dialog", "button"],
  button: ["button"],
  drawerAccount: ["drawerAccount"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  headerLeftItems: "div";
  logo: "a";
  img: typeof PlasmicImg__;
  shopNowButton: typeof ShopNowButton;
  drawerCategories2: typeof DrawerCategories;
  textInput: typeof TextInput;
  headerRightItems: "div";
  account: "div";
  icon: "svg";
  cart: "div";
  drawerCart: typeof DrawerCart;
  mainSearch: typeof TextInput;
  hotDeals: "a";
  whatsNew: "a";
  bestsellers: "a";
  helpCenter: "a";
  trackOrder: "a";
  dialog: typeof Dialog;
  button: typeof Button;
  drawerAccount: typeof DrawerAccount;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicNavbar__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicNavbar__VariantsArgs;
    args?: PlasmicNavbar__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicNavbar__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicNavbar__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicNavbar__ArgProps,
          internalVariantPropNames: PlasmicNavbar__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicNavbar__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicNavbar";
  } else {
    func.displayName = `PlasmicNavbar.${nodeName}`;
  }
  return func;
}

export const PlasmicNavbar = Object.assign(
  // Top-level PlasmicNavbar renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    headerLeftItems: makeNodeComponent("headerLeftItems"),
    logo: makeNodeComponent("logo"),
    img: makeNodeComponent("img"),
    shopNowButton: makeNodeComponent("shopNowButton"),
    drawerCategories2: makeNodeComponent("drawerCategories2"),
    textInput: makeNodeComponent("textInput"),
    headerRightItems: makeNodeComponent("headerRightItems"),
    account: makeNodeComponent("account"),
    icon: makeNodeComponent("icon"),
    cart: makeNodeComponent("cart"),
    drawerCart: makeNodeComponent("drawerCart"),
    mainSearch: makeNodeComponent("mainSearch"),
    hotDeals: makeNodeComponent("hotDeals"),
    whatsNew: makeNodeComponent("whatsNew"),
    bestsellers: makeNodeComponent("bestsellers"),
    helpCenter: makeNodeComponent("helpCenter"),
    trackOrder: makeNodeComponent("trackOrder"),
    dialog: makeNodeComponent("dialog"),
    button: makeNodeComponent("button"),
    drawerAccount: makeNodeComponent("drawerAccount"),

    // Metadata about props expected for PlasmicNavbar
    internalVariantProps: PlasmicNavbar__VariantProps,
    internalArgProps: PlasmicNavbar__ArgProps
  }
);

export default PlasmicNavbar;
/* prettier-ignore-end */
