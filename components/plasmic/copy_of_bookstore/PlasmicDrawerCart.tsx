// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 5RiFpwPZc2Ux6gBUCfunxc
// Component: 0-OmNRgWAO0e

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { AntdDrawer } from "@plasmicpkgs/antd5/skinny/registerDrawer";
import QuantityInput from "../../QuantityInput"; // plasmic-import: Yf234i2zrodn/component
import { AntdButton } from "@plasmicpkgs/antd5/skinny/registerButton";

import { useScreenVariants as useScreenVariants_5IBvFMcLfRf } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: 5I_bvFMcLfRF/globalVariant
import { ModeValue, useMode } from "./PlasmicGlobalVariant__Mode"; // plasmic-import: pQjhaJ-jelU4/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 5RiFpwPZc2Ux6gBUCfunxc/projectcss
import sty from "./PlasmicDrawerCart.module.css"; // plasmic-import: 0-OmNRgWAO0e/css

createPlasmicElementProxy;

export type PlasmicDrawerCart__VariantMembers = {};
export type PlasmicDrawerCart__VariantsArgs = {};
type VariantPropType = keyof PlasmicDrawerCart__VariantsArgs;
export const PlasmicDrawerCart__VariantProps = new Array<VariantPropType>();

export type PlasmicDrawerCart__ArgsType = {
  openDrawerCart2?: boolean;
  onOpenDrawerCartChange?: (val: boolean) => void;
  openDrawerCart?: boolean;
};
type ArgPropType = keyof PlasmicDrawerCart__ArgsType;
export const PlasmicDrawerCart__ArgProps = new Array<ArgPropType>(
  "openDrawerCart2",
  "onOpenDrawerCartChange",
  "openDrawerCart"
);

export type PlasmicDrawerCart__OverridesType = {
  drawerCart?: Flex__<typeof AntdDrawer>;
  content?: Flex__<"div">;
  top?: Flex__<"div">;
  img?: Flex__<typeof PlasmicImg__>;
  quantityInput?: Flex__<typeof QuantityInput>;
  link?: Flex__<"a"> & Partial<LinkProps>;
  bottom?: Flex__<"div">;
  subtotalCard?: Flex__<"div">;
  title?: Flex__<"div">;
  amount?: Flex__<"div">;
  checkoutButton?: Flex__<typeof AntdButton>;
  goToCartButton?: Flex__<typeof AntdButton>;
};

export interface DefaultDrawerCartProps {
  openDrawerCart2?: boolean;
  onOpenDrawerCartChange?: (val: boolean) => void;
  openDrawerCart?: boolean;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicDrawerCart__RenderFunc(props: {
  variants: PlasmicDrawerCart__VariantsArgs;
  args: PlasmicDrawerCart__ArgsType;
  overrides: PlasmicDrawerCart__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          openDrawerCart: true
        },
        props.args
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "drawerCart.open",
        type: "writable",
        variableType: "boolean",

        valueProp: "openDrawerCart2",
        onChangeProp: "onOpenDrawerCartChange"
      },
      {
        path: "quantityInput.quantityValue",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 1
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants_5IBvFMcLfRf(),
    mode: useMode()
  });

  return (
    <AntdDrawer
      data-plasmic-name={"drawerCart"}
      data-plasmic-override={overrides.drawerCart}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        "__wab_instance",
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.drawerCart,
        {
          [projectcss.global_mode_darkMode]: hasVariant(
            globalVariants,
            "mode",
            "darkMode"
          ),
          [sty.drawerCartglobal_mode_darkMode]: hasVariant(
            globalVariants,
            "mode",
            "darkMode"
          )
        }
      )}
      closeButtonClassName={classNames({
        [sty["pcls_l40tOkCaSX5S"]]: hasVariant(
          globalVariants,
          "mode",
          "darkMode"
        ),
        [sty["pcls_p3v-h0brFfGd"]]: true
      })}
      defaultStylesClassName={classNames(
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        {
          [projectcss.global_mode_darkMode]: hasVariant(
            globalVariants,
            "mode",
            "darkMode"
          )
        }
      )}
      drawerContentWrapperClassName={classNames({
        [sty["pcls_2rjk7yxLrh8U"]]: hasVariant(
          globalVariants,
          "screen",
          "mobileOnly"
        ),
        [sty["pcls_sPiCzR9U5C0t"]]: true
      })}
      drawerHeaderClassName={classNames({
        [sty["pcls_9qeqq5ap3ilS"]]: true,
        [sty["pcls_KeShp-Z68Len"]]: hasVariant(
          globalVariants,
          "mode",
          "darkMode"
        )
      })}
      drawerMaskClassName={classNames({ [sty["pcls_QmDNst7Wh-sf"]]: true })}
      drawerScopeClassName={sty["drawerCart__drawer"]}
      forceRender={false}
      onOpenChange={generateStateOnChangeProp($state, ["drawerCart", "open"])}
      open={generateStateValueProp($state, ["drawerCart", "open"])}
      title={
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__tvO6,
            {
              [sty.textglobal_mode_darkMode__tvO6Mcwt]: hasVariant(
                globalVariants,
                "mode",
                "darkMode"
              )
            }
          )}
        >
          {"Cart"}
        </div>
      }
    >
      <div
        data-plasmic-name={"content"}
        data-plasmic-override={overrides.content}
        className={classNames(projectcss.all, sty.content, {
          [sty.contentglobal_mode_darkMode]: hasVariant(
            globalVariants,
            "mode",
            "darkMode"
          )
        })}
      >
        <Stack__
          as={"div"}
          data-plasmic-name={"top"}
          data-plasmic-override={overrides.top}
          hasGap={true}
          className={classNames(projectcss.all, sty.top)}
        >
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox___0H1Td)}
          >
            <div className={classNames(projectcss.all, sty.freeBox___9AZzm)}>
              <PlasmicImg__
                data-plasmic-name={"img"}
                data-plasmic-override={overrides.img}
                alt={""}
                className={classNames(sty.img, {
                  [sty.imgglobal_mode_darkMode]: hasVariant(
                    globalVariants,
                    "mode",
                    "darkMode"
                  )
                })}
                displayHeight={"auto"}
                displayMaxHeight={"58px"}
                displayMaxWidth={"58px"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"auto"}
                loading={"lazy"}
                src={{
                  src: "/plasmic/copy_of_bookstore/images/bg7Jpg.webp",
                  fullWidth: 504,
                  fullHeight: 504,
                  aspectRatio: undefined
                }}
              />
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__zlT7P)}>
              <div className={classNames(projectcss.all, sty.freeBox__jZaSk)}>
                <div className={classNames(projectcss.all, sty.freeBox__jpgUz)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__xR47W,
                      {
                        [sty.textglobal_mode_darkMode__xR47WMcwt]: hasVariant(
                          globalVariants,
                          "mode",
                          "darkMode"
                        )
                      }
                    )}
                  >
                    {"Atlas Outdoor Speaker"}
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__lVm0A,
                      {
                        [sty.textglobal_mode_darkMode__lVm0AMcwt]: hasVariant(
                          globalVariants,
                          "mode",
                          "darkMode"
                        )
                      }
                    )}
                  >
                    {"Ksh 3,500.00"}
                  </div>
                </div>
                <QuantityInput
                  data-plasmic-name={"quantityInput"}
                  data-plasmic-override={overrides.quantityInput}
                  className={classNames("__wab_instance", sty.quantityInput, {
                    [sty.quantityInputglobal_mode_darkMode]: hasVariant(
                      globalVariants,
                      "mode",
                      "darkMode"
                    )
                  })}
                  onQuantityValueChange={generateStateOnChangeProp($state, [
                    "quantityInput",
                    "quantityValue"
                  ])}
                  quantityValue={generateStateValueProp($state, [
                    "quantityInput",
                    "quantityValue"
                  ])}
                />
              </div>
              <div className={classNames(projectcss.all, sty.freeBox___2M0Ov)}>
                <PlasmicLink__
                  data-plasmic-name={"link"}
                  data-plasmic-override={overrides.link}
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    projectcss.__wab_text,
                    sty.link,
                    {
                      [sty.linkglobal_mode_darkMode]: hasVariant(
                        globalVariants,
                        "mode",
                        "darkMode"
                      )
                    }
                  )}
                  component={Link}
                  platform={"nextjs"}
                >
                  {"Remove"}
                </PlasmicLink__>
              </div>
            </div>
          </Stack__>
        </Stack__>
        <Stack__
          as={"div"}
          data-plasmic-name={"bottom"}
          data-plasmic-override={overrides.bottom}
          hasGap={true}
          className={classNames(projectcss.all, sty.bottom)}
        >
          <div
            data-plasmic-name={"subtotalCard"}
            data-plasmic-override={overrides.subtotalCard}
            className={classNames(projectcss.all, sty.subtotalCard, {
              [sty.subtotalCardglobal_mode_darkMode]: hasVariant(
                globalVariants,
                "mode",
                "darkMode"
              )
            })}
          >
            <div
              data-plasmic-name={"title"}
              data-plasmic-override={overrides.title}
              className={classNames(projectcss.all, sty.title)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__zUrdt,
                  {
                    [sty.textglobal_mode_darkMode__zUrdtMcwt]: hasVariant(
                      globalVariants,
                      "mode",
                      "darkMode"
                    )
                  }
                )}
              >
                {"Subtotal:"}
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__vGnVv,
                  {
                    [sty.textglobal_mode_darkMode__vGnVvMcwt]: hasVariant(
                      globalVariants,
                      "mode",
                      "darkMode"
                    )
                  }
                )}
              >
                {"Tax included and shipping calculated at checkout"}
              </div>
            </div>
            <div
              data-plasmic-name={"amount"}
              data-plasmic-override={overrides.amount}
              className={classNames(projectcss.all, sty.amount)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___5Y7Fn,
                  {
                    [sty.textglobal_mode_darkMode___5Y7FnMcwt]: hasVariant(
                      globalVariants,
                      "mode",
                      "darkMode"
                    )
                  }
                )}
              >
                {"Ksh 5,000.00"}
              </div>
            </div>
          </div>
          <AntdButton
            data-plasmic-name={"checkoutButton"}
            data-plasmic-override={overrides.checkoutButton}
            className={classNames("__wab_instance", sty.checkoutButton)}
            type={"primary"}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__j9GPc
              )}
            >
              {"Checkout"}
            </div>
          </AntdButton>
          <AntdButton
            data-plasmic-name={"goToCartButton"}
            data-plasmic-override={overrides.goToCartButton}
            className={classNames("__wab_instance", sty.goToCartButton)}
            type={"link"}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__uFbGc
              )}
            >
              {"Go to cart"}
            </div>
          </AntdButton>
        </Stack__>
      </div>
    </AntdDrawer>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  drawerCart: [
    "drawerCart",
    "content",
    "top",
    "img",
    "quantityInput",
    "link",
    "bottom",
    "subtotalCard",
    "title",
    "amount",
    "checkoutButton",
    "goToCartButton"
  ],
  content: [
    "content",
    "top",
    "img",
    "quantityInput",
    "link",
    "bottom",
    "subtotalCard",
    "title",
    "amount",
    "checkoutButton",
    "goToCartButton"
  ],
  top: ["top", "img", "quantityInput", "link"],
  img: ["img"],
  quantityInput: ["quantityInput"],
  link: ["link"],
  bottom: [
    "bottom",
    "subtotalCard",
    "title",
    "amount",
    "checkoutButton",
    "goToCartButton"
  ],
  subtotalCard: ["subtotalCard", "title", "amount"],
  title: ["title"],
  amount: ["amount"],
  checkoutButton: ["checkoutButton"],
  goToCartButton: ["goToCartButton"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  drawerCart: typeof AntdDrawer;
  content: "div";
  top: "div";
  img: typeof PlasmicImg__;
  quantityInput: typeof QuantityInput;
  link: "a";
  bottom: "div";
  subtotalCard: "div";
  title: "div";
  amount: "div";
  checkoutButton: typeof AntdButton;
  goToCartButton: typeof AntdButton;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicDrawerCart__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicDrawerCart__VariantsArgs;
    args?: PlasmicDrawerCart__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicDrawerCart__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicDrawerCart__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicDrawerCart__ArgProps,
          internalVariantPropNames: PlasmicDrawerCart__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicDrawerCart__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "drawerCart") {
    func.displayName = "PlasmicDrawerCart";
  } else {
    func.displayName = `PlasmicDrawerCart.${nodeName}`;
  }
  return func;
}

export const PlasmicDrawerCart = Object.assign(
  // Top-level PlasmicDrawerCart renders the root element
  makeNodeComponent("drawerCart"),
  {
    // Helper components rendering sub-elements
    content: makeNodeComponent("content"),
    top: makeNodeComponent("top"),
    img: makeNodeComponent("img"),
    quantityInput: makeNodeComponent("quantityInput"),
    link: makeNodeComponent("link"),
    bottom: makeNodeComponent("bottom"),
    subtotalCard: makeNodeComponent("subtotalCard"),
    title: makeNodeComponent("title"),
    amount: makeNodeComponent("amount"),
    checkoutButton: makeNodeComponent("checkoutButton"),
    goToCartButton: makeNodeComponent("goToCartButton"),

    // Metadata about props expected for PlasmicDrawerCart
    internalVariantProps: PlasmicDrawerCart__VariantProps,
    internalArgProps: PlasmicDrawerCart__ArgProps
  }
);

export default PlasmicDrawerCart;
/* prettier-ignore-end */
