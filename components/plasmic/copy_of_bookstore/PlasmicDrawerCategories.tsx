// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 5RiFpwPZc2Ux6gBUCfunxc
// Component: vNKnVuMZa9sL

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { AntdDrawer } from "@plasmicpkgs/antd5/skinny/registerDrawer";
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";

import { ModeValue, useMode } from "./PlasmicGlobalVariant__Mode"; // plasmic-import: pQjhaJ-jelU4/globalVariant
import { useScreenVariants as useScreenVariants_5IBvFMcLfRf } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: 5I_bvFMcLfRF/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 5RiFpwPZc2Ux6gBUCfunxc/projectcss
import sty from "./PlasmicDrawerCategories.module.css"; // plasmic-import: vNKnVuMZa9sL/css

import Book1OpenSvgrepoComsvgIcon from "./icons/PlasmicIcon__Book1OpenSvgrepoComsvg"; // plasmic-import: ZY1-CKlzfwTt/icon
import ArrowRightBoldSvgrepoComsvgIcon from "./icons/PlasmicIcon__ArrowRightBoldSvgrepoComsvg"; // plasmic-import: vLpt9sLvpdYV/icon
import NoteBookSvgrepoComsvgIcon from "./icons/PlasmicIcon__NoteBookSvgrepoComsvg"; // plasmic-import: D6Xd2OqpSu2W/icon
import ComputerCpuDeviceElectronicMonitorPcSvgrepoComsvgIcon from "./icons/PlasmicIcon__ComputerCpuDeviceElectronicMonitorPcSvgrepoComsvg"; // plasmic-import: relZUJdsFKFV/icon
import PrinterPrintSvgrepoComsvgIcon from "./icons/PlasmicIcon__PrinterPrintSvgrepoComsvg"; // plasmic-import: Mg3hhpDx8mEs/icon
import WebcamCamWebSvgrepoComsvgIcon from "./icons/PlasmicIcon__WebcamCamWebSvgrepoComsvg"; // plasmic-import: A0XVRyaSexGN/icon
import User2SvgrepoComsvgIcon from "./icons/PlasmicIcon__User2SvgrepoComsvg"; // plasmic-import: y72UWi8USQJ7/icon

createPlasmicElementProxy;

export type PlasmicDrawerCategories__VariantMembers = {};
export type PlasmicDrawerCategories__VariantsArgs = {};
type VariantPropType = keyof PlasmicDrawerCategories__VariantsArgs;
export const PlasmicDrawerCategories__VariantProps =
  new Array<VariantPropType>();

export type PlasmicDrawerCategories__ArgsType = {
  openDrawerCategory?: boolean;
  onOpenDrawerCategoryChange?: (val: boolean) => void;
};
type ArgPropType = keyof PlasmicDrawerCategories__ArgsType;
export const PlasmicDrawerCategories__ArgProps = new Array<ArgPropType>(
  "openDrawerCategory",
  "onOpenDrawerCategoryChange"
);

export type PlasmicDrawerCategories__OverridesType = {
  drawerCategories?: Flex__<typeof AntdDrawer>;
  categories?: Flex__<"div">;
  shopByCategory?: Flex__<"div">;
  category1?: Flex__<"div">;
  category2?: Flex__<"div">;
  category3?: Flex__<"div">;
  category4?: Flex__<"div">;
  category5?: Flex__<"div">;
  title?: Flex__<"div">;
};

export interface DefaultDrawerCategoriesProps {
  openDrawerCategory?: boolean;
  onOpenDrawerCategoryChange?: (val: boolean) => void;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicDrawerCategories__RenderFunc(props: {
  variants: PlasmicDrawerCategories__VariantsArgs;
  args: PlasmicDrawerCategories__ArgsType;
  overrides: PlasmicDrawerCategories__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "drawerCategories.open",
        type: "writable",
        variableType: "boolean",

        valueProp: "openDrawerCategory",
        onChangeProp: "onOpenDrawerCategoryChange"
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    mode: useMode(),
    screen: useScreenVariants_5IBvFMcLfRf()
  });

  return (
    <AntdDrawer
      data-plasmic-name={"drawerCategories"}
      data-plasmic-override={overrides.drawerCategories}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        "__wab_instance",
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.drawerCategories,
        {
          [projectcss.global_mode_darkMode]: hasVariant(
            globalVariants,
            "mode",
            "darkMode"
          ),
          [sty.drawerCategoriesglobal_mode_darkMode]: hasVariant(
            globalVariants,
            "mode",
            "darkMode"
          )
        }
      )}
      closeButtonClassName={classNames({ [sty["pcls_djLoMzmzhCpn"]]: true })}
      defaultStylesClassName={classNames(
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        {
          [projectcss.global_mode_darkMode]: hasVariant(
            globalVariants,
            "mode",
            "darkMode"
          )
        }
      )}
      drawerContentWrapperClassName={classNames({
        [sty["pcls_m5YwTLKtAgqN"]]: true,
        [sty["pcls_nDmB-5nWaAYc"]]: hasVariant(
          globalVariants,
          "screen",
          "mobileOnly"
        )
      })}
      drawerHeaderClassName={classNames({ [sty["pcls_TJdBP9bZOciP"]]: true })}
      drawerMaskClassName={classNames({ [sty["pcls_JTe1pFmH6_3m"]]: true })}
      drawerScopeClassName={sty["drawerCategories__drawer"]}
      onOpenChange={generateStateOnChangeProp($state, [
        "drawerCategories",
        "open"
      ])}
      open={generateStateValueProp($state, ["drawerCategories", "open"])}
      placement={"left"}
      title={
        <Stack__
          as={"div"}
          data-plasmic-name={"title"}
          data-plasmic-override={overrides.title}
          hasGap={true}
          className={classNames(projectcss.all, sty.title)}
        >
          <User2SvgrepoComsvgIcon
            className={classNames(projectcss.all, sty.svg__w0JUl)}
            role={"img"}
          />

          <div className={classNames(projectcss.all, sty.freeBox__xrIr9)}>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__rDxa
              )}
            >
              {"Hello, "}
            </div>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__yfbeq
              )}
            >
              {"sign in"}
            </div>
          </div>
        </Stack__>
      }
    >
      <Stack__
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox__uVk5)}
      >
        <Stack__
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__jiuqa)}
        >
          <PlasmicLink__
            className={classNames(
              projectcss.all,
              projectcss.a,
              projectcss.__wab_text,
              sty.link__otNCt
            )}
            component={Link}
            platform={"nextjs"}
          >
            {"Best Sellers"}
          </PlasmicLink__>
          <PlasmicLink__
            className={classNames(
              projectcss.all,
              projectcss.a,
              projectcss.__wab_text,
              sty.link__coFgq,
              {
                [sty.linkglobal_mode_darkMode__coFgqMcwt]: hasVariant(
                  globalVariants,
                  "mode",
                  "darkMode"
                )
              }
            )}
            component={Link}
            platform={"nextjs"}
          >
            {"New Releases"}
          </PlasmicLink__>
          <PlasmicLink__
            className={classNames(
              projectcss.all,
              projectcss.a,
              projectcss.__wab_text,
              sty.link__zyoxd
            )}
            component={Link}
            platform={"nextjs"}
          >
            {"Hot Deals"}
          </PlasmicLink__>
        </Stack__>
        <Stack__
          as={"div"}
          data-plasmic-name={"categories"}
          data-plasmic-override={overrides.categories}
          hasGap={true}
          className={classNames(projectcss.all, sty.categories)}
        >
          <div
            data-plasmic-name={"shopByCategory"}
            data-plasmic-override={overrides.shopByCategory}
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.shopByCategory,
              {
                [sty.shopByCategoryglobal_mode_darkMode]: hasVariant(
                  globalVariants,
                  "mode",
                  "darkMode"
                )
              }
            )}
          >
            {"Shop by Category"}
          </div>
          <div
            data-plasmic-name={"category1"}
            data-plasmic-override={overrides.category1}
            className={classNames(projectcss.all, sty.category1)}
          >
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__fpes)}
            >
              <Book1OpenSvgrepoComsvgIcon
                className={classNames(projectcss.all, sty.svg__xrbT0)}
                role={"img"}
              />

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__hNu2K,
                  {
                    [sty.textglobal_mode_darkMode__hNu2KMcwt]: hasVariant(
                      globalVariants,
                      "mode",
                      "darkMode"
                    )
                  }
                )}
              >
                {"Books"}
              </div>
            </Stack__>
            <ArrowRightBoldSvgrepoComsvgIcon
              className={classNames(projectcss.all, sty.svg__iGyDp, {
                [sty.svgglobal_mode_darkMode__iGyDpMcwt]: hasVariant(
                  globalVariants,
                  "mode",
                  "darkMode"
                )
              })}
              role={"img"}
            />
          </div>
          <div
            data-plasmic-name={"category2"}
            data-plasmic-override={overrides.category2}
            className={classNames(projectcss.all, sty.category2)}
          >
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__hpYm8)}
            >
              <NoteBookSvgrepoComsvgIcon
                className={classNames(projectcss.all, sty.svg__yqWu3)}
                role={"img"}
              />

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__tXp2P
                )}
              >
                {"Stationery"}
              </div>
            </Stack__>
            <ArrowRightBoldSvgrepoComsvgIcon
              className={classNames(projectcss.all, sty.svg__sQTxX, {
                [sty.svgglobal_mode_darkMode__sQTxXMcwt]: hasVariant(
                  globalVariants,
                  "mode",
                  "darkMode"
                )
              })}
              role={"img"}
            />
          </div>
          <div
            data-plasmic-name={"category3"}
            data-plasmic-override={overrides.category3}
            className={classNames(projectcss.all, sty.category3)}
          >
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__s7DYh)}
            >
              <ComputerCpuDeviceElectronicMonitorPcSvgrepoComsvgIcon
                className={classNames(projectcss.all, sty.svg___6BMw)}
                role={"img"}
              />

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__pBkt2
                )}
              >
                {"Computers"}
              </div>
            </Stack__>
            <ArrowRightBoldSvgrepoComsvgIcon
              className={classNames(projectcss.all, sty.svg__eC6B, {
                [sty.svgglobal_mode_darkMode__eC6BMcwt]: hasVariant(
                  globalVariants,
                  "mode",
                  "darkMode"
                )
              })}
              role={"img"}
            />
          </div>
          <div
            data-plasmic-name={"category4"}
            data-plasmic-override={overrides.category4}
            className={classNames(projectcss.all, sty.category4)}
          >
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__n1EfK)}
            >
              <PrinterPrintSvgrepoComsvgIcon
                className={classNames(projectcss.all, sty.svg__mcc5)}
                role={"img"}
              />

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__mBkoz
                )}
              >
                {"Printers"}
              </div>
            </Stack__>
            <ArrowRightBoldSvgrepoComsvgIcon
              className={classNames(projectcss.all, sty.svg__jNavI, {
                [sty.svgglobal_mode_darkMode__jNavIMcwt]: hasVariant(
                  globalVariants,
                  "mode",
                  "darkMode"
                )
              })}
              role={"img"}
            />
          </div>
          <div
            data-plasmic-name={"category5"}
            data-plasmic-override={overrides.category5}
            className={classNames(projectcss.all, sty.category5)}
          >
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__e8RdD)}
            >
              <WebcamCamWebSvgrepoComsvgIcon
                className={classNames(projectcss.all, sty.svg__ygtHs)}
                role={"img"}
              />

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__xbsrR
                )}
              >
                {"IT Accessories"}
              </div>
            </Stack__>
            <ArrowRightBoldSvgrepoComsvgIcon
              className={classNames(projectcss.all, sty.svg__gicY, {
                [sty.svgglobal_mode_darkMode__gicYMcwt]: hasVariant(
                  globalVariants,
                  "mode",
                  "darkMode"
                )
              })}
              role={"img"}
            />
          </div>
        </Stack__>
      </Stack__>
    </AntdDrawer>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  drawerCategories: [
    "drawerCategories",
    "categories",
    "shopByCategory",
    "category1",
    "category2",
    "category3",
    "category4",
    "category5",
    "title"
  ],
  categories: [
    "categories",
    "shopByCategory",
    "category1",
    "category2",
    "category3",
    "category4",
    "category5"
  ],
  shopByCategory: ["shopByCategory"],
  category1: ["category1"],
  category2: ["category2"],
  category3: ["category3"],
  category4: ["category4"],
  category5: ["category5"],
  title: ["title"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  drawerCategories: typeof AntdDrawer;
  categories: "div";
  shopByCategory: "div";
  category1: "div";
  category2: "div";
  category3: "div";
  category4: "div";
  category5: "div";
  title: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicDrawerCategories__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicDrawerCategories__VariantsArgs;
    args?: PlasmicDrawerCategories__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicDrawerCategories__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicDrawerCategories__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicDrawerCategories__ArgProps,
          internalVariantPropNames: PlasmicDrawerCategories__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicDrawerCategories__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "drawerCategories") {
    func.displayName = "PlasmicDrawerCategories";
  } else {
    func.displayName = `PlasmicDrawerCategories.${nodeName}`;
  }
  return func;
}

export const PlasmicDrawerCategories = Object.assign(
  // Top-level PlasmicDrawerCategories renders the root element
  makeNodeComponent("drawerCategories"),
  {
    // Helper components rendering sub-elements
    categories: makeNodeComponent("categories"),
    shopByCategory: makeNodeComponent("shopByCategory"),
    category1: makeNodeComponent("category1"),
    category2: makeNodeComponent("category2"),
    category3: makeNodeComponent("category3"),
    category4: makeNodeComponent("category4"),
    category5: makeNodeComponent("category5"),
    title: makeNodeComponent("title"),

    // Metadata about props expected for PlasmicDrawerCategories
    internalVariantProps: PlasmicDrawerCategories__VariantProps,
    internalArgProps: PlasmicDrawerCategories__ArgProps
  }
);

export default PlasmicDrawerCategories;
/* prettier-ignore-end */
