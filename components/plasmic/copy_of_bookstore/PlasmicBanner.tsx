// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 5RiFpwPZc2Ux6gBUCfunxc
// Component: RgK5DySIFbBw

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { AntdButton } from "@plasmicpkgs/antd5/skinny/registerButton";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 5RiFpwPZc2Ux6gBUCfunxc/projectcss
import sty from "./PlasmicBanner.module.css"; // plasmic-import: RgK5DySIFbBw/css

createPlasmicElementProxy;

export type PlasmicBanner__VariantMembers = {};
export type PlasmicBanner__VariantsArgs = {};
type VariantPropType = keyof PlasmicBanner__VariantsArgs;
export const PlasmicBanner__VariantProps = new Array<VariantPropType>();

export type PlasmicBanner__ArgsType = {
  imageWidth?: string;
  imageHeight?: string;
  imageAlt?: string;
  bannerImage?: React.ComponentProps<typeof PlasmicImg__>["src"];
  label?: React.ReactNode;
  title?: React.ReactNode;
  description?: React.ReactNode;
  button?: React.ReactNode;
  salePrice?: React.ReactNode;
};
type ArgPropType = keyof PlasmicBanner__ArgsType;
export const PlasmicBanner__ArgProps = new Array<ArgPropType>(
  "imageWidth",
  "imageHeight",
  "imageAlt",
  "bannerImage",
  "label",
  "title",
  "description",
  "button",
  "salePrice"
);

export type PlasmicBanner__OverridesType = {
  banner?: Flex__<"div">;
  img?: Flex__<typeof PlasmicImg__>;
  details?: Flex__<"div">;
  labelBanner?: Flex__<"div">;
  titleBanner?: Flex__<"div">;
  descriptionBanner?: Flex__<"div">;
  salePrice1?: Flex__<"div">;
  buttonBanner?: Flex__<"div">;
};

export interface DefaultBannerProps {
  imageWidth?: string;
  imageHeight?: string;
  imageAlt?: string;
  bannerImage?: React.ComponentProps<typeof PlasmicImg__>["src"];
  label?: React.ReactNode;
  title?: React.ReactNode;
  description?: React.ReactNode;
  button?: React.ReactNode;
  salePrice?: React.ReactNode;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicBanner__RenderFunc(props: {
  variants: PlasmicBanner__VariantsArgs;
  args: PlasmicBanner__ArgsType;
  overrides: PlasmicBanner__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          bannerImage:
            "https://h2g13ydp8iq17z7f.public.blob.vercel-storage.com/Banner/main-slider/Banner1-96vynm8TPvvjcjpYkCDoz7FYBNMaVH.jpg"
        },
        props.args
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  return (
    <div
      data-plasmic-name={"banner"}
      data-plasmic-override={overrides.banner}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.banner
      )}
    >
      <PlasmicImg__
        data-plasmic-name={"img"}
        data-plasmic-override={overrides.img}
        alt={args.imageAlt}
        className={classNames(sty.img)}
        displayHeight={"100%"}
        displayMaxHeight={"none"}
        displayMaxWidth={"100%"}
        displayMinHeight={"0"}
        displayMinWidth={"0"}
        displayWidth={"auto"}
        height={args.imageHeight}
        loading={"lazy"}
        src={args.bannerImage}
        width={args.imageWidth}
      />

      <Stack__
        as={"div"}
        data-plasmic-name={"details"}
        data-plasmic-override={overrides.details}
        hasGap={true}
        className={classNames(projectcss.all, sty.details)}
      >
        <div
          data-plasmic-name={"labelBanner"}
          data-plasmic-override={overrides.labelBanner}
          className={classNames(projectcss.all, sty.labelBanner)}
        >
          {renderPlasmicSlot({
            defaultContents: (
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___6KukQ
                )}
              >
                {"DISCOUNT"}
              </div>
            ),
            value: args.label,
            className: classNames(sty.slotTargetLabel)
          })}
        </div>
        <div
          data-plasmic-name={"titleBanner"}
          data-plasmic-override={overrides.titleBanner}
          className={classNames(projectcss.all, sty.titleBanner)}
        >
          {renderPlasmicSlot({
            defaultContents: (
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__qcwl
                )}
              >
                {"10% Discount \non all Textbooks"}
              </div>
            ),
            value: args.title,
            className: classNames(sty.slotTargetTitle)
          })}
        </div>
        <div
          data-plasmic-name={"descriptionBanner"}
          data-plasmic-override={overrides.descriptionBanner}
          className={classNames(projectcss.all, sty.descriptionBanner)}
        >
          {renderPlasmicSlot({
            defaultContents: (
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__lyktW
                )}
              >
                {"Enter some text"}
              </div>
            ),
            value: args.description,
            className: classNames(sty.slotTargetDescription)
          })}
        </div>
        <div
          data-plasmic-name={"salePrice1"}
          data-plasmic-override={overrides.salePrice1}
          className={classNames(projectcss.all, sty.salePrice1)}
        >
          {renderPlasmicSlot({
            defaultContents: (
              <div className={classNames(projectcss.all, sty.freeBox___2UIKz)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__p5ODd
                  )}
                >
                  {"Ksh 26,000"}
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__gZd4N
                  )}
                >
                  {"Ksh 10,500"}
                </div>
              </div>
            ),
            value: args.salePrice,
            className: classNames(sty.slotTargetSalePrice)
          })}
        </div>
        <div
          data-plasmic-name={"buttonBanner"}
          data-plasmic-override={overrides.buttonBanner}
          className={classNames(projectcss.all, sty.buttonBanner)}
        >
          {renderPlasmicSlot({
            defaultContents: (
              <AntdButton
                className={classNames("__wab_instance", sty.button__rBh50)}
                size={"large"}
                type={"primary"}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__hak5Y
                  )}
                >
                  {"Shop Now"}
                </div>
              </AntdButton>
            ),
            value: args.button
          })}
        </div>
      </Stack__>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  banner: [
    "banner",
    "img",
    "details",
    "labelBanner",
    "titleBanner",
    "descriptionBanner",
    "salePrice1",
    "buttonBanner"
  ],
  img: ["img"],
  details: [
    "details",
    "labelBanner",
    "titleBanner",
    "descriptionBanner",
    "salePrice1",
    "buttonBanner"
  ],
  labelBanner: ["labelBanner"],
  titleBanner: ["titleBanner"],
  descriptionBanner: ["descriptionBanner"],
  salePrice1: ["salePrice1"],
  buttonBanner: ["buttonBanner"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  banner: "div";
  img: typeof PlasmicImg__;
  details: "div";
  labelBanner: "div";
  titleBanner: "div";
  descriptionBanner: "div";
  salePrice1: "div";
  buttonBanner: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicBanner__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicBanner__VariantsArgs;
    args?: PlasmicBanner__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicBanner__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicBanner__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicBanner__ArgProps,
          internalVariantPropNames: PlasmicBanner__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicBanner__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "banner") {
    func.displayName = "PlasmicBanner";
  } else {
    func.displayName = `PlasmicBanner.${nodeName}`;
  }
  return func;
}

export const PlasmicBanner = Object.assign(
  // Top-level PlasmicBanner renders the root element
  makeNodeComponent("banner"),
  {
    // Helper components rendering sub-elements
    img: makeNodeComponent("img"),
    details: makeNodeComponent("details"),
    labelBanner: makeNodeComponent("labelBanner"),
    titleBanner: makeNodeComponent("titleBanner"),
    descriptionBanner: makeNodeComponent("descriptionBanner"),
    salePrice1: makeNodeComponent("salePrice1"),
    buttonBanner: makeNodeComponent("buttonBanner"),

    // Metadata about props expected for PlasmicBanner
    internalVariantProps: PlasmicBanner__VariantProps,
    internalArgProps: PlasmicBanner__ArgProps
  }
);

export default PlasmicBanner;
/* prettier-ignore-end */
