// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 5RiFpwPZc2Ux6gBUCfunxc
// Component: u78mgfCwPbxj

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { AntdSingleCollapse } from "@plasmicpkgs/antd5/skinny/registerCollapse";
import { singleCollapseHelpers as AntdSingleCollapse_Helpers } from "@plasmicpkgs/antd5/skinny/registerCollapse";

import { ModeValue, useMode } from "./PlasmicGlobalVariant__Mode"; // plasmic-import: pQjhaJ-jelU4/globalVariant
import { useScreenVariants as useScreenVariants_5IBvFMcLfRf } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: 5I_bvFMcLfRF/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 5RiFpwPZc2Ux6gBUCfunxc/projectcss
import sty from "./PlasmicFooter.module.css"; // plasmic-import: u78mgfCwPbxj/css

import XLogo2023SvgIcon from "./icons/PlasmicIcon__XLogo2023Svg"; // plasmic-import: L2Cv-nyYoozH/icon
import FacebookSvgrepoComsvgIcon from "./icons/PlasmicIcon__FacebookSvgrepoComsvg"; // plasmic-import: ShJjQkc9YFlc/icon
import InstagramSvgrepoComsvgIcon from "./icons/PlasmicIcon__InstagramSvgrepoComsvg"; // plasmic-import: zDrUs6m16H1p/icon
import Whatsapp128SvgrepoComsvgIcon from "./icons/PlasmicIcon__Whatsapp128SvgrepoComsvg"; // plasmic-import: vuuHZnxQPK7p/icon
import VisaSvgrepoComColoursvgIcon from "./icons/PlasmicIcon__VisaSvgrepoComColoursvg"; // plasmic-import: 6DpiBuKTtmBQ/icon
import MastercardSvgrepoComsvgIcon from "./icons/PlasmicIcon__MastercardSvgrepoComsvg"; // plasmic-import: zHwnPqweqx8k/icon
import MPesaLogosvgIcon from "./icons/PlasmicIcon__MPesaLogosvg"; // plasmic-import: RGNHpVHhDdWC/icon

createPlasmicElementProxy;

export type PlasmicFooter__VariantMembers = {};
export type PlasmicFooter__VariantsArgs = {};
type VariantPropType = keyof PlasmicFooter__VariantsArgs;
export const PlasmicFooter__VariantProps = new Array<VariantPropType>();

export type PlasmicFooter__ArgsType = {};
type ArgPropType = keyof PlasmicFooter__ArgsType;
export const PlasmicFooter__ArgProps = new Array<ArgPropType>();

export type PlasmicFooter__OverridesType = {
  footer?: Flex__<"section">;
  img?: Flex__<typeof PlasmicImg__>;
  getToKnowUsMobile?: Flex__<typeof AntdSingleCollapse>;
  customerServiceMobile?: Flex__<typeof AntdSingleCollapse>;
  ordersReturnsMobile2?: Flex__<typeof AntdSingleCollapse>;
  getToKnowUs?: Flex__<"div">;
  ordersReturns?: Flex__<"div">;
  customerService?: Flex__<"div">;
  createAccount?: Flex__<"a"> & Partial<LinkProps>;
  visa?: Flex__<"svg">;
  mastecard?: Flex__<"svg">;
  mPesa?: Flex__<"svg">;
};

export interface DefaultFooterProps {
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicFooter__RenderFunc(props: {
  variants: PlasmicFooter__VariantsArgs;
  args: PlasmicFooter__ArgsType;
  overrides: PlasmicFooter__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "getToKnowUsMobile.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("open", AntdSingleCollapse_Helpers)
      },
      {
        path: "customerServiceMobile.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("open", AntdSingleCollapse_Helpers)
      },
      {
        path: "ordersReturnsMobile2.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("open", AntdSingleCollapse_Helpers)
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const [isVisaHover, triggerVisaHoverProps] = useTrigger("useHover", {});
  const [isMastecardHover, triggerMastecardHoverProps] = useTrigger(
    "useHover",
    {}
  );
  const [isMPesaHover, triggerMPesaHoverProps] = useTrigger("useHover", {});
  const triggers = {
    hover_visa: isVisaHover,
    hover_mastecard: isMastecardHover,
    hover_mPesa: isMPesaHover
  };

  const globalVariants = ensureGlobalVariants({
    mode: useMode(),
    screen: useScreenVariants_5IBvFMcLfRf()
  });

  return (
    <section
      data-plasmic-name={"footer"}
      data-plasmic-override={overrides.footer}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.footer,
        {
          [projectcss.global_mode_darkMode]: hasVariant(
            globalVariants,
            "mode",
            "darkMode"
          ),
          [sty.footerglobal_mode_darkMode]: hasVariant(
            globalVariants,
            "mode",
            "darkMode"
          )
        }
      )}
    >
      <div
        className={classNames(projectcss.all, sty.freeBox__sSjoj, {
          [sty.freeBoxglobal_mode_darkMode__sSjojMcwt]: hasVariant(
            globalVariants,
            "mode",
            "darkMode"
          )
        })}
      >
        <div
          className={classNames(projectcss.all, sty.columns__pmRsm, {
            [sty.columnsglobal_mode_darkMode__pmRsmMcwt]: hasVariant(
              globalVariants,
              "mode",
              "darkMode"
            )
          })}
        >
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.column__vd61A)}
          >
            <PlasmicImg__
              data-plasmic-name={"img"}
              data-plasmic-override={overrides.img}
              alt={""}
              className={classNames(sty.img)}
              displayHeight={"auto"}
              displayMaxHeight={"none"}
              displayMaxWidth={"100%"}
              displayMinHeight={"0"}
              displayMinWidth={"0"}
              displayWidth={"auto"}
              height={"35"}
              loading={"lazy"}
              src={
                "https://h2g13ydp8iq17z7f.public.blob.vercel-storage.com/Logo/kitabu.ke%20logo-7wewzFysxJyGutwlOf9E5Z2DAbNQHG.png"
              }
              width={"120"}
            />

            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__agJhr,
                {
                  [sty.textglobal_mode_darkMode__agJhrMcwt]: hasVariant(
                    globalVariants,
                    "mode",
                    "darkMode"
                  )
                }
              )}
            >
              {"Your Online Bookshelf"}
            </div>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__pf4D1,
                {
                  [sty.textglobal_mode_darkMode__pf4D1Mcwt]: hasVariant(
                    globalVariants,
                    "mode",
                    "darkMode"
                  )
                }
              )}
            >
              {"Corner House M3\nAlong Kimathi Street"}
            </div>
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__zxyAt)}
            >
              <XLogo2023SvgIcon
                className={classNames(projectcss.all, sty.svg__tr0Vr, {
                  [sty.svgglobal_mode_darkMode__tr0VrMcwt]: hasVariant(
                    globalVariants,
                    "mode",
                    "darkMode"
                  )
                })}
                role={"img"}
              />

              <FacebookSvgrepoComsvgIcon
                className={classNames(projectcss.all, sty.svg__pq6Vu, {
                  [sty.svgglobal_mode_darkMode__pq6VuMcwt]: hasVariant(
                    globalVariants,
                    "mode",
                    "darkMode"
                  )
                })}
                role={"img"}
              />

              <InstagramSvgrepoComsvgIcon
                className={classNames(projectcss.all, sty.svg__uUt0P, {
                  [sty.svgglobal_mode_darkMode__uUt0PMcwt]: hasVariant(
                    globalVariants,
                    "mode",
                    "darkMode"
                  )
                })}
                role={"img"}
              />

              <Whatsapp128SvgrepoComsvgIcon
                className={classNames(projectcss.all, sty.svg__wCnVu, {
                  [sty.svgglobal_mode_darkMode__wCnVuMcwt]: hasVariant(
                    globalVariants,
                    "mode",
                    "darkMode"
                  )
                })}
                role={"img"}
              />
            </Stack__>
          </Stack__>
          <div className={classNames(projectcss.all, sty.column__foyCk)}>
            {(hasVariant(globalVariants, "screen", "mobileOnly") ? true : false)
              ? (() => {
                  const child$Props = {
                    bordered: false,
                    className: classNames(
                      "__wab_instance",
                      sty.getToKnowUsMobile,
                      {
                        [sty.getToKnowUsMobileglobal_mode_darkMode]: hasVariant(
                          globalVariants,
                          "mode",
                          "darkMode"
                        )
                      }
                    ),
                    expandIconPosition: "end",
                    headerClass: classNames({
                      [sty["pcls_n2AQPbCb1TWp"]]: true
                    }),
                    label2: (
                      <h6
                        className={classNames(
                          projectcss.all,
                          projectcss.h6,
                          projectcss.__wab_text,
                          sty.h6__aIrJm,
                          {
                            [sty.h6global_mode_darkMode__aIrJmMcwt]: hasVariant(
                              globalVariants,
                              "mode",
                              "darkMode"
                            )
                          }
                        )}
                      >
                        {"Get to Know Us"}
                      </h6>
                    ),
                    onChange: generateStateOnChangePropForCodeComponents(
                      $state,
                      "open",
                      ["getToKnowUsMobile", "open"],
                      AntdSingleCollapse_Helpers
                    ),
                    open: generateStateValueProp($state, [
                      "getToKnowUsMobile",
                      "open"
                    ]),
                    showArrow: true
                  };
                  initializeCodeComponentStates(
                    $state,
                    [
                      {
                        name: "open",
                        plasmicStateName: "getToKnowUsMobile.open"
                      }
                    ],
                    [],
                    AntdSingleCollapse_Helpers ?? {},
                    child$Props
                  );

                  return (
                    <AntdSingleCollapse
                      data-plasmic-name={"getToKnowUsMobile"}
                      data-plasmic-override={overrides.getToKnowUsMobile}
                      {...child$Props}
                    >
                      {(
                        hasVariant(globalVariants, "screen", "mobileOnly")
                          ? true
                          : false
                      ) ? (
                        <Stack__
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__ua7Pd
                          )}
                        >
                          <PlasmicLink__
                            className={classNames(
                              projectcss.all,
                              projectcss.a,
                              projectcss.__wab_text,
                              sty.link__yo2F,
                              {
                                [sty.linkglobal_mode_darkMode__yo2FMcwt]:
                                  hasVariant(globalVariants, "mode", "darkMode")
                              }
                            )}
                            component={Link}
                            href={`/about`}
                            platform={"nextjs"}
                          >
                            {"About Us"}
                          </PlasmicLink__>
                          <PlasmicLink__
                            className={classNames(
                              projectcss.all,
                              projectcss.a,
                              projectcss.__wab_text,
                              sty.link__nWyzg,
                              {
                                [sty.linkglobal_mode_darkMode__nWyzgMcwt]:
                                  hasVariant(globalVariants, "mode", "darkMode")
                              }
                            )}
                            component={Link}
                            platform={"nextjs"}
                          >
                            {"News & Blog"}
                          </PlasmicLink__>
                          <PlasmicLink__
                            className={classNames(
                              projectcss.all,
                              projectcss.a,
                              projectcss.__wab_text,
                              sty.link___5QLlt,
                              {
                                [sty.linkglobal_mode_darkMode___5QLltMcwt]:
                                  hasVariant(globalVariants, "mode", "darkMode")
                              }
                            )}
                            component={Link}
                            platform={"nextjs"}
                          >
                            {"Contact Us"}
                          </PlasmicLink__>
                        </Stack__>
                      ) : null}
                    </AntdSingleCollapse>
                  );
                })()
              : null}
            {(hasVariant(globalVariants, "screen", "mobileOnly") ? true : false)
              ? (() => {
                  const child$Props = {
                    bordered: false,
                    className: classNames(
                      "__wab_instance",
                      sty.customerServiceMobile,
                      {
                        [sty.customerServiceMobileglobal_mode_darkMode]:
                          hasVariant(globalVariants, "mode", "darkMode")
                      }
                    ),
                    expandIconPosition: "end",
                    headerClass: classNames({
                      [sty["pcls_4CamOrqaF2Kd"]]: true
                    }),
                    label2: (
                      <h6
                        className={classNames(
                          projectcss.all,
                          projectcss.h6,
                          projectcss.__wab_text,
                          sty.h6__l1Lyr,
                          {
                            [sty.h6global_mode_darkMode__l1LyrMcwt]: hasVariant(
                              globalVariants,
                              "mode",
                              "darkMode"
                            )
                          }
                        )}
                      >
                        {"Customer Service"}
                      </h6>
                    ),
                    onChange: generateStateOnChangePropForCodeComponents(
                      $state,
                      "open",
                      ["customerServiceMobile", "open"],
                      AntdSingleCollapse_Helpers
                    ),
                    open: generateStateValueProp($state, [
                      "customerServiceMobile",
                      "open"
                    ]),
                    showArrow: true
                  };
                  initializeCodeComponentStates(
                    $state,
                    [
                      {
                        name: "open",
                        plasmicStateName: "customerServiceMobile.open"
                      }
                    ],
                    [],
                    AntdSingleCollapse_Helpers ?? {},
                    child$Props
                  );

                  return (
                    <AntdSingleCollapse
                      data-plasmic-name={"customerServiceMobile"}
                      data-plasmic-override={overrides.customerServiceMobile}
                      {...child$Props}
                    >
                      <Stack__
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__noNom
                        )}
                      >
                        <PlasmicLink__
                          className={classNames(
                            projectcss.all,
                            projectcss.a,
                            projectcss.__wab_text,
                            sty.link___6F13T,
                            {
                              [sty.linkglobal_mode_darkMode___6F13TMcwt]:
                                hasVariant(globalVariants, "mode", "darkMode")
                            }
                          )}
                          component={Link}
                          platform={"nextjs"}
                        >
                          {"Help Center"}
                        </PlasmicLink__>
                        <PlasmicLink__
                          className={classNames(
                            projectcss.all,
                            projectcss.a,
                            projectcss.__wab_text,
                            sty.link__fyBtZ,
                            {
                              [sty.linkglobal_mode_darkMode__fyBtZMcwt]:
                                hasVariant(globalVariants, "mode", "darkMode")
                            }
                          )}
                          component={Link}
                          platform={"nextjs"}
                        >
                          {"FAQ's"}
                        </PlasmicLink__>
                        <PlasmicLink__
                          className={classNames(
                            projectcss.all,
                            projectcss.a,
                            projectcss.__wab_text,
                            sty.link___6AYt9,
                            {
                              [sty.linkglobal_mode_darkMode___6AYt9Mcwt]:
                                hasVariant(globalVariants, "mode", "darkMode")
                            }
                          )}
                          component={Link}
                          platform={"nextjs"}
                        >
                          {"Feedback"}
                        </PlasmicLink__>
                        <PlasmicLink__
                          className={classNames(
                            projectcss.all,
                            projectcss.a,
                            projectcss.__wab_text,
                            sty.link__a74Wz,
                            {
                              [sty.linkglobal_mode_darkMode__a74WzMcwt]:
                                hasVariant(globalVariants, "mode", "darkMode")
                            }
                          )}
                          component={Link}
                          href={`/login`}
                          platform={"nextjs"}
                        >
                          {"Sign In"}
                        </PlasmicLink__>
                      </Stack__>
                    </AntdSingleCollapse>
                  );
                })()
              : null}
            {(hasVariant(globalVariants, "screen", "mobileOnly") ? true : false)
              ? (() => {
                  const child$Props = {
                    bordered: false,
                    className: classNames(
                      "__wab_instance",
                      sty.ordersReturnsMobile2,
                      {
                        [sty.ordersReturnsMobile2global_mode_darkMode]:
                          hasVariant(globalVariants, "mode", "darkMode")
                      }
                    ),
                    expandIconPosition: "end",
                    headerClass: classNames({
                      [sty["pcls_XmMFLySsyxBF"]]: true
                    }),
                    label2: (
                      <h6
                        className={classNames(
                          projectcss.all,
                          projectcss.h6,
                          projectcss.__wab_text,
                          sty.h6__ksSd,
                          {
                            [sty.h6global_mode_darkMode__ksSdMcwt]: hasVariant(
                              globalVariants,
                              "mode",
                              "darkMode"
                            )
                          }
                        )}
                      >
                        {"Orders & Returns"}
                      </h6>
                    ),
                    onChange: generateStateOnChangePropForCodeComponents(
                      $state,
                      "open",
                      ["ordersReturnsMobile2", "open"],
                      AntdSingleCollapse_Helpers
                    ),
                    open: generateStateValueProp($state, [
                      "ordersReturnsMobile2",
                      "open"
                    ]),
                    showArrow: true
                  };
                  initializeCodeComponentStates(
                    $state,
                    [
                      {
                        name: "open",
                        plasmicStateName: "ordersReturnsMobile2.open"
                      }
                    ],
                    [],
                    AntdSingleCollapse_Helpers ?? {},
                    child$Props
                  );

                  return (
                    <AntdSingleCollapse
                      data-plasmic-name={"ordersReturnsMobile2"}
                      data-plasmic-override={overrides.ordersReturnsMobile2}
                      {...child$Props}
                    >
                      <Stack__
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__x803V
                        )}
                      >
                        <PlasmicLink__
                          className={classNames(
                            projectcss.all,
                            projectcss.a,
                            projectcss.__wab_text,
                            sty.link___5JjzD,
                            {
                              [sty.linkglobal_mode_darkMode___5JjzDMcwt]:
                                hasVariant(globalVariants, "mode", "darkMode")
                            }
                          )}
                          component={Link}
                          platform={"nextjs"}
                        >
                          {"Track Orders"}
                        </PlasmicLink__>
                        <PlasmicLink__
                          className={classNames(
                            projectcss.all,
                            projectcss.a,
                            projectcss.__wab_text,
                            sty.link__kyqYv,
                            {
                              [sty.linkglobal_mode_darkMode__kyqYvMcwt]:
                                hasVariant(globalVariants, "mode", "darkMode")
                            }
                          )}
                          component={Link}
                          platform={"nextjs"}
                        >
                          {"Shipping & Delivery"}
                        </PlasmicLink__>
                        <PlasmicLink__
                          className={classNames(
                            projectcss.all,
                            projectcss.a,
                            projectcss.__wab_text,
                            sty.link___0V7Ux,
                            {
                              [sty.linkglobal_mode_darkMode___0V7UxMcwt]:
                                hasVariant(globalVariants, "mode", "darkMode")
                            }
                          )}
                          component={Link}
                          platform={"nextjs"}
                        >
                          {"Return & Exchange"}
                        </PlasmicLink__>
                        <PlasmicLink__
                          className={classNames(
                            projectcss.all,
                            projectcss.a,
                            projectcss.__wab_text,
                            sty.link__arvuy,
                            {
                              [sty.linkglobal_mode_darkMode__arvuyMcwt]:
                                hasVariant(globalVariants, "mode", "darkMode")
                            }
                          )}
                          component={Link}
                          platform={"nextjs"}
                        >
                          {"Price Match Guarantee"}
                        </PlasmicLink__>
                      </Stack__>
                    </AntdSingleCollapse>
                  );
                })()
              : null}
          </div>
          {(
            hasVariant(globalVariants, "screen", "mobileOnly") ? false : true
          ) ? (
            <Stack__
              as={"div"}
              data-plasmic-name={"getToKnowUs"}
              data-plasmic-override={overrides.getToKnowUs}
              hasGap={true}
              className={classNames(projectcss.all, sty.getToKnowUs)}
            >
              <h6
                className={classNames(
                  projectcss.all,
                  projectcss.h6,
                  projectcss.__wab_text,
                  sty.h6___1CMrz,
                  {
                    [sty.h6global_mode_darkMode___1CMrzMcwt]: hasVariant(
                      globalVariants,
                      "mode",
                      "darkMode"
                    )
                  }
                )}
              >
                {"Get to Know Us"}
              </h6>
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__fMyR4)}
              >
                <PlasmicLink__
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    projectcss.__wab_text,
                    sty.link__wEp1,
                    {
                      [sty.linkglobal_mode_darkMode__wEp1Mcwt]: hasVariant(
                        globalVariants,
                        "mode",
                        "darkMode"
                      )
                    }
                  )}
                  component={Link}
                  href={`/about`}
                  platform={"nextjs"}
                >
                  {"About Us"}
                </PlasmicLink__>
                <PlasmicLink__
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    projectcss.__wab_text,
                    sty.link__oyNwC,
                    {
                      [sty.linkglobal_mode_darkMode__oyNwCMcwt]: hasVariant(
                        globalVariants,
                        "mode",
                        "darkMode"
                      )
                    }
                  )}
                  component={Link}
                  platform={"nextjs"}
                >
                  {"News & Blog"}
                </PlasmicLink__>
                <PlasmicLink__
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    projectcss.__wab_text,
                    sty.link__xDOi4,
                    {
                      [sty.linkglobal_mode_darkMode__xDOi4Mcwt]: hasVariant(
                        globalVariants,
                        "mode",
                        "darkMode"
                      )
                    }
                  )}
                  component={Link}
                  platform={"nextjs"}
                >
                  {"Contact Us"}
                </PlasmicLink__>
              </Stack__>
            </Stack__>
          ) : null}
          <Stack__
            as={"div"}
            data-plasmic-name={"ordersReturns"}
            data-plasmic-override={overrides.ordersReturns}
            hasGap={true}
            className={classNames(projectcss.all, sty.ordersReturns, {
              [sty.ordersReturnsglobal_mode_darkMode]: hasVariant(
                globalVariants,
                "mode",
                "darkMode"
              )
            })}
          >
            <h6
              className={classNames(
                projectcss.all,
                projectcss.h6,
                projectcss.__wab_text,
                sty.h6__jxWux,
                {
                  [sty.h6global_mode_darkMode__jxWuxMcwt]: hasVariant(
                    globalVariants,
                    "mode",
                    "darkMode"
                  )
                }
              )}
            >
              {"Orders & Returns"}
            </h6>
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__bf6Fz)}
            >
              <PlasmicLink__
                className={classNames(
                  projectcss.all,
                  projectcss.a,
                  projectcss.__wab_text,
                  sty.link__xi7Jw,
                  {
                    [sty.linkglobal_mode_darkMode__xi7JwMcwt]: hasVariant(
                      globalVariants,
                      "mode",
                      "darkMode"
                    )
                  }
                )}
                component={Link}
                platform={"nextjs"}
              >
                {"Track Orders"}
              </PlasmicLink__>
              <PlasmicLink__
                className={classNames(
                  projectcss.all,
                  projectcss.a,
                  projectcss.__wab_text,
                  sty.link___7J2Zt,
                  {
                    [sty.linkglobal_mode_darkMode___7J2ZtMcwt]: hasVariant(
                      globalVariants,
                      "mode",
                      "darkMode"
                    )
                  }
                )}
                component={Link}
                platform={"nextjs"}
              >
                {"Shipping & Delivery"}
              </PlasmicLink__>
              <PlasmicLink__
                className={classNames(
                  projectcss.all,
                  projectcss.a,
                  projectcss.__wab_text,
                  sty.link__a5Aii,
                  {
                    [sty.linkglobal_mode_darkMode__a5AiiMcwt]: hasVariant(
                      globalVariants,
                      "mode",
                      "darkMode"
                    )
                  }
                )}
                component={Link}
                platform={"nextjs"}
              >
                {"Return & Exchange"}
              </PlasmicLink__>
              <PlasmicLink__
                className={classNames(
                  projectcss.all,
                  projectcss.a,
                  projectcss.__wab_text,
                  sty.link__iXJni,
                  {
                    [sty.linkglobal_mode_darkMode__iXJniMcwt]: hasVariant(
                      globalVariants,
                      "mode",
                      "darkMode"
                    )
                  }
                )}
                component={Link}
                platform={"nextjs"}
              >
                {"Price Match Guarantee"}
              </PlasmicLink__>
            </Stack__>
          </Stack__>
          <Stack__
            as={"div"}
            data-plasmic-name={"customerService"}
            data-plasmic-override={overrides.customerService}
            hasGap={true}
            className={classNames(projectcss.all, sty.customerService)}
          >
            <h6
              className={classNames(
                projectcss.all,
                projectcss.h6,
                projectcss.__wab_text,
                sty.h6__yHp5J,
                {
                  [sty.h6global_mode_darkMode__yHp5JMcwt]: hasVariant(
                    globalVariants,
                    "mode",
                    "darkMode"
                  )
                }
              )}
            >
              {"Customer Service"}
            </h6>
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox___4KG)}
            >
              <PlasmicLink__
                className={classNames(
                  projectcss.all,
                  projectcss.a,
                  projectcss.__wab_text,
                  sty.link__eCjj,
                  {
                    [sty.linkglobal_mode_darkMode__eCjjMcwt]: hasVariant(
                      globalVariants,
                      "mode",
                      "darkMode"
                    )
                  }
                )}
                component={Link}
                platform={"nextjs"}
              >
                {"Help Center"}
              </PlasmicLink__>
              <PlasmicLink__
                className={classNames(
                  projectcss.all,
                  projectcss.a,
                  projectcss.__wab_text,
                  sty.link__eTahs,
                  {
                    [sty.linkglobal_mode_darkMode__eTahsMcwt]: hasVariant(
                      globalVariants,
                      "mode",
                      "darkMode"
                    )
                  }
                )}
                component={Link}
                platform={"nextjs"}
              >
                {"FAQ's"}
              </PlasmicLink__>
              <PlasmicLink__
                className={classNames(
                  projectcss.all,
                  projectcss.a,
                  projectcss.__wab_text,
                  sty.link___2L1Nd,
                  {
                    [sty.linkglobal_mode_darkMode___2L1NdMcwt]: hasVariant(
                      globalVariants,
                      "mode",
                      "darkMode"
                    )
                  }
                )}
                component={Link}
                platform={"nextjs"}
              >
                {"Feedback"}
              </PlasmicLink__>
              <PlasmicLink__
                className={classNames(
                  projectcss.all,
                  projectcss.a,
                  projectcss.__wab_text,
                  sty.link__wrzWq,
                  {
                    [sty.linkglobal_mode_darkMode__wrzWqMcwt]: hasVariant(
                      globalVariants,
                      "mode",
                      "darkMode"
                    )
                  }
                )}
                component={Link}
                href={`/login`}
                platform={"nextjs"}
              >
                {"Sign In"}
              </PlasmicLink__>
              {(
                hasVariant(globalVariants, "screen", "tablet") ? true : false
              ) ? (
                <PlasmicLink__
                  data-plasmic-name={"createAccount"}
                  data-plasmic-override={overrides.createAccount}
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    projectcss.__wab_text,
                    sty.createAccount,
                    {
                      [sty.createAccountglobal_mode_darkMode]: hasVariant(
                        globalVariants,
                        "mode",
                        "darkMode"
                      )
                    }
                  )}
                  component={Link}
                  href={`/create-account`}
                  platform={"nextjs"}
                >
                  {"Create Account"}
                </PlasmicLink__>
              ) : null}
            </Stack__>
          </Stack__>
        </div>
        <div className={classNames(projectcss.all, sty.columns__oiti1)}>
          <div className={classNames(projectcss.all, sty.column__qlEhL)}>
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__idywZ)}
            >
              <PlasmicLink__
                className={classNames(
                  projectcss.all,
                  projectcss.a,
                  projectcss.__wab_text,
                  sty.link__tElmo,
                  {
                    [sty.linkglobal_mode_darkMode__tElmoMcwt]: hasVariant(
                      globalVariants,
                      "mode",
                      "darkMode"
                    )
                  }
                )}
                component={Link}
                href={`/privacy-policy`}
                platform={"nextjs"}
              >
                {"Privacy Policy"}
              </PlasmicLink__>
              <PlasmicLink__
                className={classNames(
                  projectcss.all,
                  projectcss.a,
                  projectcss.__wab_text,
                  sty.link__cBGw,
                  {
                    [sty.linkglobal_mode_darkMode__cBGwMcwt]: hasVariant(
                      globalVariants,
                      "mode",
                      "darkMode"
                    )
                  }
                )}
                component={Link}
                platform={"nextjs"}
              >
                {"Terms of Use"}
              </PlasmicLink__>
              <PlasmicLink__
                className={classNames(
                  projectcss.all,
                  projectcss.a,
                  projectcss.__wab_text,
                  sty.link__jSy0N,
                  {
                    [sty.linkglobal_mode_darkMode__jSy0NMcwt]: hasVariant(
                      globalVariants,
                      "mode",
                      "darkMode"
                    )
                  }
                )}
                component={Link}
                platform={"nextjs"}
              >
                {"Sitemap"}
              </PlasmicLink__>
            </Stack__>
          </div>
          <div className={classNames(projectcss.all, sty.column__dcrSe)}>
            <div
              className={classNames(projectcss.all, sty.freeBox__juXno, {
                [sty.freeBoxglobal_mode_darkMode__juXnoMcwt]: hasVariant(
                  globalVariants,
                  "mode",
                  "darkMode"
                )
              })}
            >
              <PlasmicIcon__
                data-plasmic-name={"visa"}
                data-plasmic-override={overrides.visa}
                PlasmicIconType={
                  triggers.hover_visa
                    ? VisaSvgrepoComColoursvgIcon
                    : VisaSvgrepoComColoursvgIcon
                }
                className={classNames(projectcss.all, sty.visa, {
                  [sty.visaglobal_mode_darkMode]: hasVariant(
                    globalVariants,
                    "mode",
                    "darkMode"
                  )
                })}
                role={"img"}
                data-plasmic-trigger-props={[triggerVisaHoverProps]}
              />

              <PlasmicIcon__
                data-plasmic-name={"mastecard"}
                data-plasmic-override={overrides.mastecard}
                PlasmicIconType={
                  triggers.hover_mastecard
                    ? MastercardSvgrepoComsvgIcon
                    : MastercardSvgrepoComsvgIcon
                }
                className={classNames(projectcss.all, sty.mastecard)}
                role={"img"}
                data-plasmic-trigger-props={[triggerMastecardHoverProps]}
              />

              <PlasmicIcon__
                data-plasmic-name={"mPesa"}
                data-plasmic-override={overrides.mPesa}
                PlasmicIconType={
                  triggers.hover_mPesa ? MPesaLogosvgIcon : MPesaLogosvgIcon
                }
                className={classNames(projectcss.all, sty.mPesa)}
                role={"img"}
                data-plasmic-trigger-props={[triggerMPesaHoverProps]}
              />
            </div>
          </div>
        </div>
        <div className={classNames(projectcss.all, sty.columns__m2JdS)}>
          <div className={classNames(projectcss.all, sty.column__ytlWz)}>
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__bpQ0Z)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__teYke,
                  {
                    [sty.textglobal_mode_darkMode__teYkeMcwt]: hasVariant(
                      globalVariants,
                      "mode",
                      "darkMode"
                    )
                  }
                )}
              >
                {"Copyright \u00a9 2024 Kitabu, All rights reserved."}
              </div>
            </Stack__>
          </div>
          <div className={classNames(projectcss.all, sty.column__iw6G)}>
            <div className={classNames(projectcss.all, sty.freeBox__yrBy7)} />
          </div>
        </div>
      </div>
    </section>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  footer: [
    "footer",
    "img",
    "getToKnowUsMobile",
    "customerServiceMobile",
    "ordersReturnsMobile2",
    "getToKnowUs",
    "ordersReturns",
    "customerService",
    "createAccount",
    "visa",
    "mastecard",
    "mPesa"
  ],
  img: ["img"],
  getToKnowUsMobile: ["getToKnowUsMobile"],
  customerServiceMobile: ["customerServiceMobile"],
  ordersReturnsMobile2: ["ordersReturnsMobile2"],
  getToKnowUs: ["getToKnowUs"],
  ordersReturns: ["ordersReturns"],
  customerService: ["customerService", "createAccount"],
  createAccount: ["createAccount"],
  visa: ["visa"],
  mastecard: ["mastecard"],
  mPesa: ["mPesa"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  footer: "section";
  img: typeof PlasmicImg__;
  getToKnowUsMobile: typeof AntdSingleCollapse;
  customerServiceMobile: typeof AntdSingleCollapse;
  ordersReturnsMobile2: typeof AntdSingleCollapse;
  getToKnowUs: "div";
  ordersReturns: "div";
  customerService: "div";
  createAccount: "a";
  visa: "svg";
  mastecard: "svg";
  mPesa: "svg";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicFooter__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicFooter__VariantsArgs;
    args?: PlasmicFooter__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicFooter__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicFooter__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicFooter__ArgProps,
          internalVariantPropNames: PlasmicFooter__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicFooter__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "footer") {
    func.displayName = "PlasmicFooter";
  } else {
    func.displayName = `PlasmicFooter.${nodeName}`;
  }
  return func;
}

export const PlasmicFooter = Object.assign(
  // Top-level PlasmicFooter renders the root element
  makeNodeComponent("footer"),
  {
    // Helper components rendering sub-elements
    img: makeNodeComponent("img"),
    getToKnowUsMobile: makeNodeComponent("getToKnowUsMobile"),
    customerServiceMobile: makeNodeComponent("customerServiceMobile"),
    ordersReturnsMobile2: makeNodeComponent("ordersReturnsMobile2"),
    getToKnowUs: makeNodeComponent("getToKnowUs"),
    ordersReturns: makeNodeComponent("ordersReturns"),
    customerService: makeNodeComponent("customerService"),
    createAccount: makeNodeComponent("createAccount"),
    visa: makeNodeComponent("visa"),
    mastecard: makeNodeComponent("mastecard"),
    mPesa: makeNodeComponent("mPesa"),

    // Metadata about props expected for PlasmicFooter
    internalVariantProps: PlasmicFooter__VariantProps,
    internalArgProps: PlasmicFooter__ArgProps
  }
);

export default PlasmicFooter;
/* prettier-ignore-end */
