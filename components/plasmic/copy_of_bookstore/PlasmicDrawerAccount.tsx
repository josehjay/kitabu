// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 5RiFpwPZc2Ux6gBUCfunxc
// Component: 5-lgTWEvw2Is

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { AntdDrawer } from "@plasmicpkgs/antd5/skinny/registerDrawer";

import { useScreenVariants as useScreenVariants_5IBvFMcLfRf } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: 5I_bvFMcLfRF/globalVariant
import { ModeValue, useMode } from "./PlasmicGlobalVariant__Mode"; // plasmic-import: pQjhaJ-jelU4/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 5RiFpwPZc2Ux6gBUCfunxc/projectcss
import sty from "./PlasmicDrawerAccount.module.css"; // plasmic-import: 5-lgTWEvw2Is/css

import SignInSqureSvgrepoComsvgIcon from "./icons/PlasmicIcon__SignInSqureSvgrepoComsvg"; // plasmic-import: vQWRNZO9wJpm/icon
import UserAddSvgrepoComsvgIcon from "./icons/PlasmicIcon__UserAddSvgrepoComsvg"; // plasmic-import: yf36hb-OnQ5d/icon
import WishlistSvgrepoComsvgIcon from "./icons/PlasmicIcon__WishlistSvgrepoComsvg"; // plasmic-import: -ZenoTZDiMSz/icon
import CompareSvgrepoComsvgIcon from "./icons/PlasmicIcon__CompareSvgrepoComsvg"; // plasmic-import: oAS7tvuG9j5v/icon

createPlasmicElementProxy;

export type PlasmicDrawerAccount__VariantMembers = {};
export type PlasmicDrawerAccount__VariantsArgs = {};
type VariantPropType = keyof PlasmicDrawerAccount__VariantsArgs;
export const PlasmicDrawerAccount__VariantProps = new Array<VariantPropType>();

export type PlasmicDrawerAccount__ArgsType = {
  openDrawerAccount?: boolean;
  onOpenDrawerAccountChange?: (val: boolean) => void;
};
type ArgPropType = keyof PlasmicDrawerAccount__ArgsType;
export const PlasmicDrawerAccount__ArgProps = new Array<ArgPropType>(
  "openDrawerAccount",
  "onOpenDrawerAccountChange"
);

export type PlasmicDrawerAccount__OverridesType = {
  drawerAccount?: Flex__<typeof AntdDrawer>;
  freeBox?: Flex__<"div">;
};

export interface DefaultDrawerAccountProps {
  openDrawerAccount?: boolean;
  onOpenDrawerAccountChange?: (val: boolean) => void;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicDrawerAccount__RenderFunc(props: {
  variants: PlasmicDrawerAccount__VariantsArgs;
  args: PlasmicDrawerAccount__ArgsType;
  overrides: PlasmicDrawerAccount__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "drawerAccount.open",
        type: "writable",
        variableType: "boolean",

        valueProp: "openDrawerAccount",
        onChangeProp: "onOpenDrawerAccountChange"
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants_5IBvFMcLfRf(),
    mode: useMode()
  });

  return (
    <AntdDrawer
      data-plasmic-name={"drawerAccount"}
      data-plasmic-override={overrides.drawerAccount}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        "__wab_instance",
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.drawerAccount,
        {
          [projectcss.global_mode_darkMode]: hasVariant(
            globalVariants,
            "mode",
            "darkMode"
          ),
          [sty.drawerAccountglobal_mode_darkMode]: hasVariant(
            globalVariants,
            "mode",
            "darkMode"
          )
        }
      )}
      closeButtonClassName={classNames({ [sty["pcls_OvxcIZtLUBEl"]]: true })}
      defaultStylesClassName={classNames(
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        {
          [projectcss.global_mode_darkMode]: hasVariant(
            globalVariants,
            "mode",
            "darkMode"
          )
        }
      )}
      drawerContentWrapperClassName={classNames({
        [sty["pcls_ECHm1Ux7rg3r"]]: hasVariant(
          globalVariants,
          "screen",
          "mobileOnly"
        ),
        [sty["pcls_XoMfc6hWkQ-w"]]: true
      })}
      drawerHeaderClassName={classNames({ [sty["pcls_URWru5aFAj3a"]]: true })}
      drawerMaskClassName={classNames({ [sty["pcls_tS5JIIf-fgV9"]]: true })}
      drawerScopeClassName={sty["drawerAccount__drawer"]}
      onOpenChange={generateStateOnChangeProp($state, [
        "drawerAccount",
        "open"
      ])}
      open={generateStateValueProp($state, ["drawerAccount", "open"])}
      title={
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__sq7VK
          )}
        >
          {"Account"}
        </div>
      }
    >
      <Stack__
        as={"div"}
        data-plasmic-name={"freeBox"}
        data-plasmic-override={overrides.freeBox}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox)}
      >
        <Stack__
          as={PlasmicLink__}
          hasGap={true}
          className={classNames(projectcss.all, projectcss.a, sty.link__nWvi7, {
            [sty.linkglobal_mode_darkMode__nWvi7Mcwt]: hasVariant(
              globalVariants,
              "mode",
              "darkMode"
            )
          })}
          component={Link}
          href={`/login`}
          platform={"nextjs"}
        >
          <SignInSqureSvgrepoComsvgIcon
            className={classNames(projectcss.all, sty.svg__tvAcH)}
            role={"img"}
          />

          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text___5S6DX
            )}
          >
            {"Sign in"}
          </div>
        </Stack__>
        <Stack__
          as={PlasmicLink__}
          hasGap={true}
          className={classNames(projectcss.all, projectcss.a, sty.link__g96Y8, {
            [sty.linkglobal_mode_darkMode__g96Y8Mcwt]: hasVariant(
              globalVariants,
              "mode",
              "darkMode"
            )
          })}
          component={Link}
          href={`/create-account`}
          platform={"nextjs"}
        >
          <UserAddSvgrepoComsvgIcon
            className={classNames(projectcss.all, sty.svg__eYesc)}
            role={"img"}
          />

          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text___7Rr6K
            )}
          >
            {"Create Account"}
          </div>
        </Stack__>
        <Stack__
          as={PlasmicLink__}
          hasGap={true}
          className={classNames(projectcss.all, projectcss.a, sty.link__otuzJ, {
            [sty.linkglobal_mode_darkMode__otuzJMcwt]: hasVariant(
              globalVariants,
              "mode",
              "darkMode"
            )
          })}
          component={Link}
          platform={"nextjs"}
        >
          <WishlistSvgrepoComsvgIcon
            className={classNames(projectcss.all, sty.svg__vp6IQ)}
            role={"img"}
          />

          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__cUOkp
            )}
          >
            {"Wishlist"}
          </div>
        </Stack__>
        <Stack__
          as={PlasmicLink__}
          hasGap={true}
          className={classNames(projectcss.all, projectcss.a, sty.link__kukU, {
            [sty.linkglobal_mode_darkMode__kukUMcwt]: hasVariant(
              globalVariants,
              "mode",
              "darkMode"
            )
          })}
          component={Link}
          platform={"nextjs"}
        >
          <CompareSvgrepoComsvgIcon
            className={classNames(projectcss.all, sty.svg__lq89V)}
            role={"img"}
          />

          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__ar7Ez
            )}
          >
            {"Compare"}
          </div>
        </Stack__>
      </Stack__>
    </AntdDrawer>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  drawerAccount: ["drawerAccount", "freeBox"],
  freeBox: ["freeBox"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  drawerAccount: typeof AntdDrawer;
  freeBox: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicDrawerAccount__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicDrawerAccount__VariantsArgs;
    args?: PlasmicDrawerAccount__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicDrawerAccount__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicDrawerAccount__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicDrawerAccount__ArgProps,
          internalVariantPropNames: PlasmicDrawerAccount__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicDrawerAccount__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "drawerAccount") {
    func.displayName = "PlasmicDrawerAccount";
  } else {
    func.displayName = `PlasmicDrawerAccount.${nodeName}`;
  }
  return func;
}

export const PlasmicDrawerAccount = Object.assign(
  // Top-level PlasmicDrawerAccount renders the root element
  makeNodeComponent("drawerAccount"),
  {
    // Helper components rendering sub-elements
    freeBox: makeNodeComponent("freeBox"),

    // Metadata about props expected for PlasmicDrawerAccount
    internalVariantProps: PlasmicDrawerAccount__VariantProps,
    internalArgProps: PlasmicDrawerAccount__ArgProps
  }
);

export default PlasmicDrawerAccount;
/* prettier-ignore-end */
